{
  "version": 3,
  "sources": ["../@firebase/app-compat/src/firebaseApp.ts", "../@firebase/app-compat/src/errors.ts", "../@firebase/app-compat/src/firebaseNamespaceCore.ts", "../@firebase/app-compat/src/firebaseNamespace.ts", "../@firebase/app-compat/src/logger.ts", "../@firebase/app-compat/src/registerCoreComponents.ts", "../@firebase/app-compat/src/index.ts", "../@firebase/installations/src/util/constants.ts", "../@firebase/installations/src/util/errors.ts", "../@firebase/installations/src/functions/common.ts", "../@firebase/installations/src/functions/create-installation-request.ts", "../@firebase/installations/src/util/sleep.ts", "../@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts", "../@firebase/installations/src/helpers/generate-fid.ts", "../@firebase/installations/src/util/get-key.ts", "../@firebase/installations/src/helpers/fid-changed.ts", "../@firebase/installations/src/helpers/idb-manager.ts", "../@firebase/installations/src/helpers/get-installation-entry.ts", "../@firebase/installations/src/functions/generate-auth-token-request.ts", "../@firebase/installations/src/helpers/refresh-auth-token.ts", "../@firebase/installations/src/api/get-id.ts", "../@firebase/installations/src/api/get-token.ts", "../@firebase/installations/src/functions/delete-installation-request.ts", "../@firebase/installations/src/api/delete-installations.ts", "../@firebase/installations/src/api/on-id-change.ts", "../@firebase/installations/src/api/get-installations.ts", "../@firebase/installations/src/helpers/extract-app-config.ts", "../@firebase/installations/src/functions/config.ts", "../@firebase/installations/src/index.ts", "../@firebase/analytics/src/constants.ts", "../@firebase/analytics/src/logger.ts", "../@firebase/analytics/src/helpers.ts", "../@firebase/analytics/src/errors.ts", "../@firebase/analytics/src/get-config.ts", "../@firebase/analytics/src/initialize-analytics.ts", "../@firebase/analytics/src/factory.ts", "../@firebase/analytics/src/functions.ts", "../@firebase/analytics/src/api.ts", "../@firebase/analytics/src/index.ts", "../@firebase/analytics-compat/src/service.ts", "../@firebase/analytics-compat/src/constants.ts", "../@firebase/analytics-compat/src/index.ts", "../@firebase/app-check/src/state.ts", "../@firebase/app-check/src/constants.ts", "../@firebase/app-check/src/proactive-refresh.ts", "../@firebase/app-check/src/errors.ts", "../@firebase/app-check/src/util.ts", "../@firebase/app-check/src/client.ts", "../@firebase/app-check/src/indexeddb.ts", "../@firebase/app-check/src/logger.ts", "../@firebase/app-check/src/storage.ts", "../@firebase/app-check/src/debug.ts", "../@firebase/app-check/src/internal-api.ts", "../@firebase/app-check/src/factory.ts", "../@firebase/app-check/src/recaptcha.ts", "../@firebase/app-check/src/providers.ts", "../@firebase/app-check/src/api.ts", "../@firebase/app-check/src/index.ts", "../@firebase/app-check-compat/src/errors.ts", "../@firebase/app-check-compat/src/service.ts", "../@firebase/app-check-compat/src/index.ts", "../@firebase/auth/src/platform_cordova/plugins.ts", "../@firebase/auth/src/platform_cordova/popup_redirect/utils.ts", "../@firebase/auth/src/platform_cordova/popup_redirect/events.ts", "../@firebase/auth/src/platform_cordova/popup_redirect/popup_redirect.ts", "../@firebase/auth/internal/index.ts", "../@firebase/auth-compat/src/platform.ts", "../@firebase/auth-compat/src/persistence.ts", "../@firebase/auth-compat/src/popup_redirect.ts", "../@firebase/auth-compat/src/wrap.ts", "../@firebase/auth-compat/src/user_credential.ts", "../@firebase/auth-compat/src/user.ts", "../@firebase/auth-compat/src/auth.ts", "../@firebase/auth-compat/src/phone_auth_provider.ts", "../@firebase/auth-compat/src/recaptcha_verifier.ts", "../@firebase/auth-compat/index.ts", "../@firebase/database-compat/src/util/util.ts", "../@firebase/database-compat/src/util/validation.ts", "../@firebase/database-compat/src/api/onDisconnect.ts", "../@firebase/database-compat/src/api/TransactionResult.ts", "../@firebase/database-compat/src/api/Reference.ts", "../@firebase/database-compat/src/api/Database.ts", "../@firebase/database-compat/src/api/internal.ts", "../@firebase/database-compat/src/index.ts", "../@firebase/firestore-compat/src/util/input_validation.ts", "../@firebase/firestore-compat/src/api/blob.ts", "../@firebase/firestore-compat/src/api/observer.ts", "../@firebase/firestore-compat/src/api/database.ts", "../@firebase/firestore-compat/src/api/field_path.ts", "../@firebase/firestore-compat/src/api/field_value.ts", "../@firebase/firestore-compat/src/config.ts", "../@firebase/firestore-compat/src/index.ts", "../@firebase/functions/src/serializer.ts", "../@firebase/functions/src/constants.ts", "../@firebase/functions/src/error.ts", "../@firebase/functions/src/context.ts", "../@firebase/functions/src/service.ts", "../@firebase/functions/src/config.ts", "../@firebase/functions/src/api.ts", "../@firebase/functions/src/index.ts", "../@firebase/functions-compat/src/service.ts", "../@firebase/functions-compat/src/register.ts", "../@firebase/functions-compat/src/index.ts", "../@firebase/messaging/src/util/constants.ts", "../@firebase/messaging/src/interfaces/internal-message-payload.ts", "../@firebase/messaging/src/helpers/array-base64-translator.ts", "../@firebase/messaging/src/helpers/migrate-old-database.ts", "../@firebase/messaging/src/internals/idb-manager.ts", "../@firebase/messaging/src/util/errors.ts", "../@firebase/messaging/src/internals/requests.ts", "../@firebase/messaging/src/internals/token-manager.ts", "../@firebase/messaging/src/helpers/externalizePayload.ts", "../@firebase/messaging/src/helpers/is-console-message.ts", "../@firebase/messaging/src/helpers/logToFirelog.ts", "../@firebase/messaging/src/helpers/extract-app-config.ts", "../@firebase/messaging/src/messaging-service.ts", "../@firebase/messaging/src/helpers/registerDefaultSw.ts", "../@firebase/messaging/src/helpers/updateSwReg.ts", "../@firebase/messaging/src/helpers/updateVapidKey.ts", "../@firebase/messaging/src/api/getToken.ts", "../@firebase/messaging/src/helpers/logToScion.ts", "../@firebase/messaging/src/listeners/window-listener.ts", "../@firebase/messaging/src/helpers/register.ts", "../@firebase/messaging/src/api/isSupported.ts", "../@firebase/messaging/src/api/deleteToken.ts", "../@firebase/messaging/src/api/onMessage.ts", "../@firebase/messaging/src/api.ts", "../@firebase/messaging/src/index.ts", "../@firebase/messaging/src/util/constants.ts", "../@firebase/messaging/src/interfaces/internal-message-payload.ts", "../@firebase/messaging/src/helpers/array-base64-translator.ts", "../@firebase/messaging/src/helpers/migrate-old-database.ts", "../@firebase/messaging/src/internals/idb-manager.ts", "../@firebase/messaging/src/util/errors.ts", "../@firebase/messaging/src/internals/requests.ts", "../@firebase/messaging/src/internals/token-manager.ts", "../@firebase/messaging/src/helpers/externalizePayload.ts", "../@firebase/messaging/src/helpers/is-console-message.ts", "../@firebase/messaging/src/helpers/sleep.ts", "../@firebase/messaging/src/helpers/logToFirelog.ts", "../@firebase/messaging/src/listeners/sw-listeners.ts", "../@firebase/messaging/src/helpers/extract-app-config.ts", "../@firebase/messaging/src/messaging-service.ts", "../@firebase/messaging/src/helpers/register.ts", "../@firebase/messaging/src/api/isSupported.ts", "../@firebase/messaging/src/api/onBackgroundMessage.ts", "../@firebase/messaging/src/api/setDeliveryMetricsExportedToBigQueryEnabled.ts", "../@firebase/messaging/src/api.ts", "../@firebase/messaging/src/index.sw.ts", "../@firebase/messaging-compat/src/messaging-compat.ts", "../@firebase/messaging-compat/src/registerMessagingCompat.ts", "../@firebase/messaging-compat/src/index.ts", "../@firebase/storage/src/implementation/constants.ts", "../@firebase/storage/src/implementation/error.ts", "../@firebase/storage/src/implementation/location.ts", "../@firebase/storage/src/implementation/failrequest.ts", "../@firebase/storage/src/implementation/backoff.ts", "../@firebase/storage/src/implementation/type.ts", "../@firebase/storage/src/implementation/url.ts", "../@firebase/storage/src/implementation/connection.ts", "../@firebase/storage/src/implementation/request.ts", "../@firebase/storage/src/implementation/fs.ts", "../@firebase/storage/src/platform/browser/base64.ts", "../@firebase/storage/src/implementation/string.ts", "../@firebase/storage/src/implementation/blob.ts", "../@firebase/storage/src/implementation/json.ts", "../@firebase/storage/src/implementation/path.ts", "../@firebase/storage/src/implementation/metadata.ts", "../@firebase/storage/src/implementation/list.ts", "../@firebase/storage/src/implementation/requestinfo.ts", "../@firebase/storage/src/implementation/requests.ts", "../@firebase/storage/src/implementation/taskenums.ts", "../@firebase/storage/src/implementation/observer.ts", "../@firebase/storage/src/implementation/async.ts", "../@firebase/storage/src/platform/browser/connection.ts", "../@firebase/storage/src/task.ts", "../@firebase/storage/src/reference.ts", "../@firebase/storage/src/service.ts", "../@firebase/storage/src/constants.ts", "../@firebase/storage/src/api.ts", "../@firebase/storage/src/api.browser.ts", "../@firebase/storage/src/index.ts", "../@firebase/storage-compat/src/tasksnapshot.ts", "../@firebase/storage-compat/src/task.ts", "../@firebase/storage-compat/src/list.ts", "../@firebase/storage-compat/src/reference.ts", "../@firebase/storage-compat/src/service.ts", "../@firebase/storage-compat/src/index.ts", "../@firebase/performance/src/constants.ts", "../@firebase/performance/src/utils/errors.ts", "../@firebase/performance/src/utils/console_logger.ts", "../@firebase/performance/src/services/api_service.ts", "../@firebase/performance/src/services/iid_service.ts", "../@firebase/performance/src/utils/string_merger.ts", "../@firebase/performance/src/services/settings_service.ts", "../@firebase/performance/src/utils/attributes_utils.ts", "../@firebase/performance/src/utils/app_utils.ts", "../@firebase/performance/src/services/remote_config_service.ts", "../@firebase/performance/src/services/initialization_service.ts", "../@firebase/performance/src/services/transport_service.ts", "../@firebase/performance/src/services/perf_logger.ts", "../@firebase/performance/src/utils/metric_utils.ts", "../@firebase/performance/src/resources/trace.ts", "../@firebase/performance/src/resources/network_request.ts", "../@firebase/performance/src/services/oob_resources_service.ts", "../@firebase/performance/src/controllers/perf.ts", "../@firebase/performance/src/index.ts", "../@firebase/performance-compat/src/performance.ts", "../@firebase/performance-compat/src/index.ts", "../@firebase/remote-config/src/client/remote_config_fetch_client.ts", "../@firebase/remote-config/src/constants.ts", "../@firebase/remote-config/src/errors.ts", "../@firebase/remote-config/src/value.ts", "../@firebase/remote-config/src/api.ts", "../@firebase/remote-config/src/client/caching_client.ts", "../@firebase/remote-config/src/language.ts", "../@firebase/remote-config/src/client/rest_client.ts", "../@firebase/remote-config/src/client/retrying_client.ts", "../@firebase/remote-config/src/remote_config.ts", "../@firebase/remote-config/src/storage/storage.ts", "../@firebase/remote-config/src/storage/storage_cache.ts", "../@firebase/remote-config/src/register.ts", "../@firebase/remote-config/src/api2.ts", "../@firebase/remote-config/src/index.ts", "../@firebase/remote-config-compat/src/remoteConfig.ts", "../@firebase/remote-config-compat/src/index.ts", "../firebase/compat/app/index.ts", "../firebase/compat/index.ts", "dep:firebase_compat"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseOptions } from './public-types';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstantiationMode,\n  Name\n} from '@firebase/component';\nimport {\n  deleteApp,\n  _addComponent,\n  _addOrOverwriteComponent,\n  _DEFAULT_ENTRY_NAME,\n  _FirebaseAppInternal as _FirebaseAppExp\n} from '@firebase/app';\nimport { _FirebaseService, _FirebaseNamespace } from './types';\nimport { Compat } from '@firebase/util';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface _FirebaseApp {\n  /**\n   * The (read-only) name (identifier) for this App. '[DEFAULT]' is the default\n   * App.\n   */\n  name: string;\n\n  /**\n   * The (read-only) configuration options from the app initialization.\n   */\n  options: FirebaseOptions;\n\n  /**\n   * The settable config flag for GDPR opt-in/opt-out\n   */\n  automaticDataCollectionEnabled: boolean;\n\n  /**\n   * Make the given App unusable and free resources.\n   */\n  delete(): Promise<void>;\n}\n/**\n * Global context object for a collection of services using\n * a shared authentication state.\n *\n * marked as internal because it references internal types exported from @firebase/app\n * @internal\n */\nexport class FirebaseAppImpl implements Compat<_FirebaseAppExp>, _FirebaseApp {\n  private container: ComponentContainer;\n\n  constructor(\n    readonly _delegate: _FirebaseAppExp,\n    private readonly firebase: _FirebaseNamespace\n  ) {\n    // add itself to container\n    _addComponent(\n      _delegate,\n      new Component('app-compat', () => this, ComponentType.PUBLIC)\n    );\n\n    this.container = _delegate.container;\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    return this._delegate.automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this._delegate.automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get options(): FirebaseOptions {\n    return this._delegate.options;\n  }\n\n  delete(): Promise<void> {\n    return new Promise<void>(resolve => {\n      this._delegate.checkDestroyed();\n      resolve();\n    }).then(() => {\n      this.firebase.INTERNAL.removeApp(this.name);\n      return deleteApp(this._delegate);\n    });\n  }\n\n  /**\n   * Return a service instance associated with this app (creating it\n   * on demand), identified by the passed instanceIdentifier.\n   *\n   * NOTE: Currently storage and functions are the only ones that are leveraging this\n   * functionality. They invoke it by calling:\n   *\n   * ```javascript\n   * firebase.app().storage('STORAGE BUCKET ID')\n   * ```\n   *\n   * The service name is passed to this already\n   * @internal\n   */\n  _getService(\n    name: string,\n    instanceIdentifier: string = _DEFAULT_ENTRY_NAME\n  ): _FirebaseService {\n    this._delegate.checkDestroyed();\n\n    // Initialize instance if InstatiationMode is `EXPLICIT`.\n    const provider = this._delegate.container.getProvider(name as Name);\n    if (\n      !provider.isInitialized() &&\n      provider.getComponent()?.instantiationMode === InstantiationMode.EXPLICIT\n    ) {\n      provider.initialize();\n    }\n\n    // getImmediate will always succeed because _getService is only called for registered components.\n    return provider.getImmediate({\n      identifier: instanceIdentifier\n    }) as unknown as _FirebaseService;\n  }\n\n  /**\n   * Remove a service instance from the cache, so we will create a new instance for this service\n   * when people try to get it again.\n   *\n   * NOTE: currently only firestore uses this functionality to support firestore shutdown.\n   *\n   * @param name The service name\n   * @param instanceIdentifier instance identifier in case multiple instances are allowed\n   * @internal\n   */\n  _removeServiceInstance(\n    name: string,\n    instanceIdentifier: string = _DEFAULT_ENTRY_NAME\n  ): void {\n    this._delegate.container\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .getProvider(name as any)\n      .clearInstance(instanceIdentifier);\n  }\n\n  /**\n   * @param component the component being added to this app's container\n   * @internal\n   */\n  _addComponent(component: Component): void {\n    _addComponent(this._delegate, component);\n  }\n\n  _addOrOverwriteComponent(component: Component): void {\n    _addOrOverwriteComponent(this._delegate, component);\n  }\n\n  toJSON(): object {\n    return {\n      name: this.name,\n      automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,\n      options: this.options\n    };\n  }\n}\n\n// TODO: investigate why the following needs to be commented out\n// Prevent dead-code elimination of these methods w/o invalid property\n// copying.\n// (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\n//   FirebaseAppImpl.prototype.delete ||\n//   console.log('dc');\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.'\n};\n\ntype ErrorParams = { [key in AppError]: { appName: string } };\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app-compat',\n  'Firebase',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from './public-types';\nimport {\n  _FirebaseNamespace,\n  _FirebaseService,\n  FirebaseServiceNamespace\n} from './types';\nimport * as modularAPIs from '@firebase/app';\nimport { _FirebaseAppInternal as _FirebaseAppExp } from '@firebase/app';\nimport { Component, ComponentType, Name } from '@firebase/component';\n\nimport { deepExtend, contains } from '@firebase/util';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { FirebaseAppLiteImpl } from './lite/firebaseAppLite';\n\n/**\n * Because auth can't share code with other components, we attach the utility functions\n * in an internal namespace to share code.\n * This function return a firebase namespace object without\n * any utility functions, so it can be shared between the regular firebaseNamespace and\n * the lite version.\n */\nexport function createFirebaseNamespaceCore(\n  firebaseAppImpl: typeof FirebaseAppImpl | typeof FirebaseAppLiteImpl\n): _FirebaseNamespace {\n  const apps: { [name: string]: FirebaseApp } = {};\n  // // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // const components = new Map<string, Component<any>>();\n\n  // A namespace is a plain JavaScript Object.\n  const namespace: _FirebaseNamespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    // @ts-ignore\n    __esModule: true,\n    initializeApp: initializeAppCompat,\n    // @ts-ignore\n    app,\n    registerVersion: modularAPIs.registerVersion,\n    setLogLevel: modularAPIs.setLogLevel,\n    onLog: modularAPIs.onLog,\n    // @ts-ignore\n    apps: null,\n    SDK_VERSION: modularAPIs.SDK_VERSION,\n    INTERNAL: {\n      registerComponent: registerComponentCompat,\n      removeApp,\n      useAsService,\n      modularAPIs\n    }\n  };\n\n  // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase');\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (namespace as any)['default'] = namespace;\n\n  // firebase.apps is a read-only getter.\n  Object.defineProperty(namespace, 'apps', {\n    get: getApps\n  });\n\n  /**\n   * Called by App.delete() - but before any services associated with the App\n   * are deleted.\n   */\n  function removeApp(name: string): void {\n    delete apps[name];\n  }\n\n  /**\n   * Get the App object for a given name (or DEFAULT).\n   */\n  function app(name?: string): FirebaseApp {\n    name = name || modularAPIs._DEFAULT_ENTRY_NAME;\n    if (!contains(apps, name)) {\n      throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n    }\n    return apps[name];\n  }\n\n  // @ts-ignore\n  app['App'] = firebaseAppImpl;\n\n  /**\n   * Create a new App instance (name must be unique).\n   *\n   * This function is idempotent. It can be called more than once and return the same instance using the same options and config.\n   */\n  function initializeAppCompat(\n    options: FirebaseOptions,\n    rawConfig = {}\n  ): FirebaseApp {\n    const app = modularAPIs.initializeApp(\n      options,\n      rawConfig\n    ) as _FirebaseAppExp;\n\n    if (contains(apps, app.name)) {\n      return apps[app.name];\n    }\n\n    const appCompat = new firebaseAppImpl(app, namespace);\n    apps[app.name] = appCompat;\n    return appCompat;\n  }\n\n  /*\n   * Return an array of all the non-deleted FirebaseApps.\n   */\n  function getApps(): FirebaseApp[] {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps).map(name => apps[name]);\n  }\n\n  function registerComponentCompat<T extends Name>(\n    component: Component<T>\n  ): FirebaseServiceNamespace<_FirebaseService> | null {\n    const componentName = component.name;\n    const componentNameWithoutCompat = componentName.replace('-compat', '');\n    if (\n      modularAPIs._registerComponent(component) &&\n      component.type === ComponentType.PUBLIC\n    ) {\n      // create service namespace for public components\n      // The Service namespace is an accessor function ...\n      const serviceNamespace = (\n        appArg: FirebaseApp = app()\n      ): _FirebaseService => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (typeof (appArg as any)[componentNameWithoutCompat] !== 'function') {\n          // Invalid argument.\n          // This happens in the following case: firebase.storage('gs:/')\n          throw ERROR_FACTORY.create(AppError.INVALID_APP_ARGUMENT, {\n            appName: componentName\n          });\n        }\n\n        // Forward service instance lookup to the FirebaseApp.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return (appArg as any)[componentNameWithoutCompat]();\n      };\n\n      // ... and a container for service-level properties.\n      if (component.serviceProps !== undefined) {\n        deepExtend(serviceNamespace, component.serviceProps);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (namespace as any)[componentNameWithoutCompat] = serviceNamespace;\n\n      // Patch the FirebaseAppImpl prototype\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (firebaseAppImpl.prototype as any)[componentNameWithoutCompat] =\n        // TODO: The eslint disable can be removed and the 'ignoreRestArgs'\n        // option added to the no-explicit-any rule when ESlint releases it.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function (...args: any) {\n          const serviceFxn = this._getService.bind(this, componentName);\n          return serviceFxn.apply(\n            this,\n            component.multipleInstances ? args : []\n          );\n        };\n    }\n\n    return component.type === ComponentType.PUBLIC\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (namespace as any)[componentNameWithoutCompat]\n      : null;\n  }\n\n  // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n  function useAsService(app: FirebaseApp, name: string): string | null {\n    if (name === 'serverAuth') {\n      return null;\n    }\n\n    const useService = name;\n\n    return useService;\n  }\n\n  return namespace;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseNamespace } from './public-types';\nimport { createSubscribe, deepExtend, ErrorFactory } from '@firebase/util';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { createFirebaseNamespaceCore } from './firebaseNamespaceCore';\n\n/**\n * Return a firebase namespace object.\n *\n * In production, this will be called exactly once and the result\n * assigned to the 'firebase' global.  It may be called multiple times\n * in unit tests.\n */\nexport function createFirebaseNamespace(): FirebaseNamespace {\n  const namespace = createFirebaseNamespaceCore(FirebaseAppImpl);\n  namespace.INTERNAL = {\n    ...namespace.INTERNAL,\n    createFirebaseNamespace,\n    extendNamespace,\n    createSubscribe,\n    ErrorFactory,\n    deepExtend\n  };\n\n  /**\n   * Patch the top-level firebase namespace with additional properties.\n   *\n   * firebase.INTERNAL.extendNamespace()\n   */\n  function extendNamespace(props: { [prop: string]: unknown }): void {\n    deepExtend(namespace, props);\n  }\n\n  return namespace;\n}\n\nexport const firebase = createFirebaseNamespace();\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-compat');\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion } from '@firebase/app';\n\nimport { name, version } from '../package.json';\n\nexport function registerCoreComponents(variant?: string): void {\n  // Register `app` package.\n  registerVersion(name, version, variant);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseNamespace } from './public-types';\nimport { isBrowser } from '@firebase/util';\nimport { firebase as firebaseNamespace } from './firebaseNamespace';\nimport { logger } from './logger';\nimport { registerCoreComponents } from './registerCoreComponents';\n\n// Firebase Lite detection\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nif (isBrowser() && (self as any).firebase !== undefined) {\n  logger.warn(`\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  `);\n\n  // eslint-disable-next-line\n  const sdkVersion = ((self as any).firebase as FirebaseNamespace).SDK_VERSION;\n  if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {\n    logger.warn(`\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    `);\n  }\n}\n\nconst firebase = firebaseNamespace;\n\nregisterCoreComponents();\n\n// eslint-disable-next-line import/no-default-export\nexport default firebase;\n\nexport { _FirebaseNamespace, _FirebaseService } from './types';\nexport { FirebaseApp, FirebaseNamespace } from './public-types';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.complete;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.complete;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      appConfig,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, platformLoggerProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl.appConfig\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl.appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link #IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const platformLoggerProvider = _getProvider(app, 'platform-logger');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    platformLoggerProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n", "/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Analytics.\n */\nexport const ANALYTICS_TYPE = 'analytics';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport const enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CustomParams, ControlParams, EventParams } from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-intialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.customData.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport { Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { _initializeAnalytics } from './initialize-analytics';\nimport { logger } from './logger';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService {\n  constructor(public app: FirebaseApp) {}\n  _delete(): Promise<void> {\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n  }\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/page-view\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n", "/**\n * Firebase Analytics\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { factory } from './factory';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { logEvent } from './api';\nimport { name, version } from '../package.json';\nimport { AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAnalytics(): void {\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, { options: analyticsOptions }: InstanceFactoryOptions) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (\n          eventName: string,\n          eventParams?: { [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  EventParams,\n  FirebaseAnalytics\n} from '@firebase/analytics-types';\nimport {\n  Analytics as AnalyticsServiceExp,\n  logEvent as logEventExp,\n  setAnalyticsCollectionEnabled as setAnalyticsCollectionEnabledExp,\n  setCurrentScreen as setCurrentScreenExp,\n  setUserId as setUserIdExp,\n  setUserProperties as setUserPropertiesExp\n} from '@firebase/analytics';\nimport { _FirebaseService, FirebaseApp } from '@firebase/app-compat';\n\nexport class AnalyticsService implements FirebaseAnalytics, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    readonly _delegate: AnalyticsServiceExp\n  ) {}\n\n  logEvent(\n    eventName: string,\n    eventParams?: EventParams | CustomParams,\n    options?: AnalyticsCallOptions\n  ): void {\n    logEventExp(this._delegate, eventName as '', eventParams, options);\n  }\n\n  setCurrentScreen(screenName: string, options?: AnalyticsCallOptions): void {\n    setCurrentScreenExp(this._delegate, screenName, options);\n  }\n\n  setUserId(id: string, options?: AnalyticsCallOptions): void {\n    setUserIdExp(this._delegate, id, options);\n  }\n\n  setUserProperties(\n    properties: CustomParams,\n    options?: AnalyticsCallOptions\n  ): void {\n    setUserPropertiesExp(this._delegate, properties, options);\n  }\n\n  setAnalyticsCollectionEnabled(enabled: boolean): void {\n    setAnalyticsCollectionEnabledExp(this._delegate, enabled);\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /**\n   * @deprecated\n   * This event name is deprecated and is unsupported in updated\n   * Enhanced Ecommerce reports.\n   */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, {\n  _FirebaseNamespace,\n  FirebaseApp\n} from '@firebase/app-compat';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { name, version } from '../package.json';\nimport { AnalyticsService } from './service';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport {\n  settings as settingsExp,\n  isSupported as isSupportedExp\n} from '@firebase/analytics';\nimport { EventName } from './constants';\n\nconst factory: InstanceFactory<'analytics-compat'> = (\n  container: ComponentContainer\n) => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const analyticsServiceExp = container.getProvider('analytics').getImmediate();\n\n  return new AnalyticsService(app as FirebaseApp, analyticsServiceExp);\n};\n\nexport function registerAnalytics(): void {\n  const namespaceExports = {\n    Analytics: AnalyticsService,\n    settings: settingsExp,\n    isSupported: isSupportedExp,\n    // We removed this enum in exp so need to re-create it here for compat.\n    EventName\n  };\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component('analytics-compat', factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n\nregisterAnalytics();\nfirebase.registerVersion(name, version);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  exchangeTokenPromise?: Promise<AppCheckTokenInternal>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  initialized: boolean;\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  initialized: false,\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n  DEBUG_STATE.initialized = false;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD =\n  'exchangeRecaptchaEnterpriseToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\n * One day in millis, for certain error code backoffs.\n */\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error',\n  THROTTLED = 'throttled'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.',\n  [AppCheckError.THROTTLED]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppCheckError.THROTTLED]: { time: string; httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(\n  isEnterprise: boolean = false\n): GreCAPTCHA | undefined {\n  if (isEnterprise) {\n    return self.grecaptcha?.enterprise;\n  }\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport function getDurationString(durationInMillis: number): string {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor(\n    (totalSeconds - days * 3600 * 24 - hours * 3600) / 60\n  );\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value: number): string {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaV3TokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeRecaptchaEnterpriseTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getState, setState } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64, FirebaseError } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\nimport { AppCheckError } from './errors';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(\n        getExchangeDebugTokenRequest(app, await getDebugToken()),\n        appCheck.platformLoggerProvider\n      ).then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n    const tokenFromDebugExchange: AppCheckTokenInternal =\n      await state.exchangeTokenPromise;\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider!.getToken().then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n    token = await state.exchangeTokenPromise;\n  } catch (e) {\n    if ((e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn((e as FirebaseError).message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e as FirebaseError;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  setState(app, {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  });\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => {\n        listener({ token: validToken.token });\n        initTokenRefresher(appCheck);\n      })\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  }\n\n  /**\n   * Wait for any cached token promise to resolve before starting the token\n   * refresher. The refresher checks to see if there is an existing token\n   * in state and calls the exchange endpoint if not. We should first let the\n   * IndexedDB check have a chance to populate state if it can.\n   *\n   * Listener call isn't needed here because cachedTokenPromise will call any\n   * listeners that exist when it resolves.\n   */\n\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise!.then(() => initTokenRefresher(appCheck));\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\n/**\n * Logic to create and start refresher as needed.\n */\nfunction initTokenRefresher(appCheck: AppCheckService): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher: Refresher | undefined = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    setState(app, { ...state, tokenRefresher: refresher });\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nexport function notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getState } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public platformLoggerProvider: Provider<'platform-logger'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getState(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): AppCheckService {\n  return new AppCheckService(app, platformLoggerProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nexport const RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js';\n\nexport function initializeV3(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nexport function initializeEnterprise(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n\n/**\n * Add listener to render the widget and resolve the promise when\n * the grecaptcha.ready() event fires.\n */\nfunction queueWidgetRender(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string,\n  initialized: Deferred<GreCAPTCHA>\n): void {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n\n/**\n * Add invisible div to page.\n */\nfunction makeDiv(app: FirebaseApp): string {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAV3Script(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHATopLevel | undefined;\n  }\n}\n\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseError,\n  issuedAtTime,\n  calculateBackoffMillis\n} from '@firebase/util';\nimport {\n  exchangeToken,\n  getExchangeRecaptchaEnterpriseTokenRequest,\n  getExchangeRecaptchaV3TokenRequest\n} from './client';\nimport { ONE_DAY } from './constants';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initializeV3 as initializeRecaptchaV3,\n  initializeEnterprise as initializeRecaptchaEnterprise\n} from './recaptcha';\nimport { AppCheckProvider, AppCheckTokenInternal, ThrottleData } from './types';\nimport { getDurationString } from './util';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._platformLoggerProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaV3TokenRequest(this._app!, attestedClaimsToken),\n        this._platformLoggerProvider!\n      );\n    } catch (e) {\n      if ((e as FirebaseError).code === AppCheckError.FETCH_STATUS_ERROR) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeRecaptchaV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaEnterpriseProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaEnterpriseProvider instance.\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._platformLoggerProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaEnterpriseTokenRequest(\n          this._app!,\n          attestedClaimsToken\n        ),\n        this._platformLoggerProvider!\n      );\n    } catch (e) {\n      if ((e as FirebaseError).code === AppCheckError.FETCH_STATUS_ERROR) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeRecaptchaEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Set throttle data to block requests until after a certain time\n * depending on the failed request's status code.\n * @param httpStatus - Status code of failed request.\n * @param throttleData - `ThrottleData` object containing previous throttle\n * data state.\n * @returns Data about current throttle state and expiration time.\n */\nfunction setBackoff(\n  httpStatus: number,\n  throttleData: ThrottleData | null\n): ThrottleData {\n  /**\n   * Block retries for 1 day for the following error codes:\n   *\n   * 404: Likely malformed URL.\n   *\n   * 403:\n   * - Attestation failed\n   * - Wrong API key\n   * - Project deleted\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\n     * For all other error codes, the time when it is ok to retry again\n     * is based on exponential backoff.\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData: ThrottleData | null): void {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState, getDebugState } from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid,\n  notifyTokenListeners\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\nimport { getDebugToken, initializeDebugMode, isDebugMode } from './debug';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport {\n  ReCaptchaV3Provider,\n  CustomProvider,\n  ReCaptchaEnterpriseProvider\n} from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n      // Not using logger because I don't think we ever want this accidentally hidden.\n      console.log(\n        `App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`\n      )\n    );\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getState(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, ListenerType.INTERNAL, () => {});\n  }\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n\n  const newState: AppCheckState = { ...state, activated: true };\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: cachedToken.token });\n    }\n    return cachedToken;\n  });\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n/**\n * Get the current App Check token. Attaches to the most recent\n * in-flight request if one is present. Returns null if no token\n * is present and no token requests are in-flight.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with aa\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n", "/**\n * Firebase App Check\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return factory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  USE_BEFORE_ACTIVATION = 'use-before-activation'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before activate() is called for FirebaseApp {$appName}. ' +\n    'Call activate() before instantiating other Firebase services.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckProvider,\n  AppCheckTokenResult,\n  FirebaseAppCheck\n} from '@firebase/app-check-types';\nimport { _FirebaseService, FirebaseApp } from '@firebase/app-compat';\nimport {\n  AppCheck as AppCheckServiceExp,\n  CustomProvider,\n  initializeAppCheck,\n  ReCaptchaV3Provider,\n  ReCaptchaEnterpriseProvider,\n  setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabledExp,\n  getToken as getTokenExp,\n  onTokenChanged as onTokenChangedExp\n} from '@firebase/app-check';\nimport { PartialObserver, Unsubscribe } from '@firebase/util';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\n\nexport class AppCheckService\n  implements FirebaseAppCheck, Omit<_FirebaseService, '_delegate'>\n{\n  _delegate?: AppCheckServiceExp;\n  constructor(public app: FirebaseApp) {}\n\n  activate(\n    siteKeyOrProvider: string | AppCheckProvider,\n    isTokenAutoRefreshEnabled?: boolean\n  ): void {\n    let provider:\n      | ReCaptchaV3Provider\n      | CustomProvider\n      | ReCaptchaEnterpriseProvider;\n    if (typeof siteKeyOrProvider === 'string') {\n      provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n    } else if (\n      siteKeyOrProvider instanceof ReCaptchaEnterpriseProvider ||\n      siteKeyOrProvider instanceof ReCaptchaV3Provider ||\n      siteKeyOrProvider instanceof CustomProvider\n    ) {\n      provider = siteKeyOrProvider;\n    } else {\n      provider = new CustomProvider({ getToken: siteKeyOrProvider.getToken });\n    }\n    this._delegate = initializeAppCheck(this.app, {\n      provider,\n      isTokenAutoRefreshEnabled\n    });\n  }\n\n  setTokenAutoRefreshEnabled(isTokenAutoRefreshEnabled: boolean): void {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: this.app.name\n      });\n    }\n    setTokenAutoRefreshEnabledExp(this._delegate, isTokenAutoRefreshEnabled);\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: this.app.name\n      });\n    }\n    return getTokenExp(this._delegate, forceRefresh);\n  }\n\n  onTokenChanged(\n    onNextOrObserver:\n      | PartialObserver<AppCheckTokenResult>\n      | ((tokenResult: AppCheckTokenResult) => void),\n    onError?: (error: Error) => void,\n    onCompletion?: () => void\n  ): Unsubscribe {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: this.app.name\n      });\n    }\n    return onTokenChangedExp(\n      this._delegate,\n      /**\n       * Exp onTokenChanged() will handle both overloads but we need\n       * to specify one to not confuse Typescript.\n       */\n      onNextOrObserver as (tokenResult: AppCheckTokenResult) => void,\n      onError,\n      onCompletion\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, {\n  _FirebaseNamespace,\n  FirebaseApp\n} from '@firebase/app-compat';\nimport { name, version } from '../package.json';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport { AppCheckService } from './service';\nimport { FirebaseAppCheck } from '@firebase/app-check-types';\nimport {\n  ReCaptchaV3Provider,\n  ReCaptchaEnterpriseProvider,\n  CustomProvider\n} from '@firebase/app-check';\n\nconst factory: InstanceFactory<'appCheck-compat'> = (\n  container: ComponentContainer\n) => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n\n  return new AppCheckService(app as FirebaseApp);\n};\n\nexport function registerAppCheck(): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'appCheck-compat',\n      factory,\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      ReCaptchaEnterpriseProvider,\n      ReCaptchaV3Provider,\n      CustomProvider\n    })\n  );\n}\n\nregisterAppCheck();\nfirebase.registerVersion(name, version);\n\n/**\n * Define extension behavior of `registerAppCheck`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    appCheck(app?: FirebaseApp): FirebaseAppCheck;\n  }\n  interface FirebaseApp {\n    appCheck(): FirebaseAppCheck;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface CordovaWindow extends Window {\n  cordova: {\n    plugins: {\n      browsertab: {\n        isAvailable(cb: (available: boolean) => void): void;\n        openUrl(url: string): void;\n        close(): void;\n      };\n    };\n\n    InAppBrowser: {\n      open(url: string, target: string, options: string): InAppBrowserRef;\n    };\n  };\n\n  universalLinks: {\n    subscribe(\n      n: null,\n      cb: (event: Record<string, string> | null) => void\n    ): void;\n  };\n\n  BuildInfo: {\n    readonly packageName: string;\n    readonly displayName: string;\n  };\n\n  handleOpenURL(url: string): void;\n}\n\nexport interface InAppBrowserRef {\n  close?: () => void;\n}\n\nexport function _cordovaWindow(): CordovaWindow {\n  return (window as unknown) as CordovaWindow;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  debugAssert,\n  _assert,\n  _createError,\n  _fail\n} from '../../core/util/assert';\nimport { _isAndroid, _isIOS, _isIOS7Or8 } from '../../core/util/browser';\nimport { _getRedirectUrl } from '../../core/util/handler';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent } from '../../model/popup_redirect';\nimport { InAppBrowserRef, _cordovaWindow } from '../plugins';\nimport {\n  GetProjectConfigRequest,\n  _getProjectConfig\n} from '../../api/project_config/get_project_config';\n\n/**\n * How long to wait after the app comes back into focus before concluding that\n * the user closed the sign in tab.\n */\nconst REDIRECT_TIMEOUT_MS = 2000;\n\n/**\n * Generates the URL for the OAuth handler.\n */\nexport async function _generateHandlerUrl(\n  auth: AuthInternal,\n  event: AuthEvent,\n  provider: AuthProvider\n): Promise<string> {\n  // Get the cordova plugins\n  const { BuildInfo } = _cordovaWindow();\n  debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');\n  const sessionDigest = await computeSha256(event.sessionId);\n\n  const additionalParams: Record<string, string> = {};\n  if (_isIOS()) {\n    // iOS app identifier\n    additionalParams['ibi'] = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    // Android app identifier\n    additionalParams['apn'] = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Add the display name if available\n  if (BuildInfo.displayName) {\n    additionalParams['appDisplayName'] = BuildInfo.displayName;\n  }\n\n  // Attached the hashed session ID\n  additionalParams['sessionId'] = sessionDigest;\n  return _getRedirectUrl(\n    auth,\n    provider,\n    event.type,\n    undefined,\n    event.eventId ?? undefined,\n    additionalParams\n  );\n}\n\n/**\n * Validates that this app is valid for this project configuration\n */\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  const { BuildInfo } = _cordovaWindow();\n  const request: GetProjectConfigRequest = {};\n  if (_isIOS()) {\n    request.iosBundleId = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    request.androidPackageName = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Will fail automatically if package name is not authorized\n  await _getProjectConfig(auth, request);\n}\n\nexport function _performRedirect(\n  handlerUrl: string\n): Promise<InAppBrowserRef | null> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  return new Promise(resolve => {\n    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {\n      let iabRef: InAppBrowserRef | null = null;\n      if (browserTabIsAvailable) {\n        cordova.plugins.browsertab.openUrl(handlerUrl);\n      } else {\n        // TODO: Return the inappbrowser ref that's returned from the open call\n        iabRef = cordova.InAppBrowser.open(\n          handlerUrl,\n          _isIOS7Or8() ? '_blank' : '_system',\n          'location=yes'\n        );\n      }\n      resolve(iabRef);\n    });\n  });\n}\n\n// Thin interface wrapper to avoid circular dependency with ./events module\ninterface PassiveAuthEventListener {\n  addPassiveListener(cb: () => void): void;\n  removePassiveListener(cb: () => void): void;\n}\n\n/**\n * This function waits for app activity to be seen before resolving. It does\n * this by attaching listeners to various dom events. Once the app is determined\n * to be visible, this promise resolves. AFTER that resolution, the listeners\n * are detached and any browser tabs left open will be closed.\n */\nexport async function _waitForAppResume(\n  auth: AuthInternal,\n  eventListener: PassiveAuthEventListener,\n  iabRef: InAppBrowserRef | null\n): Promise<void> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  let cleanup = (): void => {};\n  try {\n    await new Promise<void>((resolve, reject) => {\n      let onCloseTimer: number | null = null;\n\n      // DEFINE ALL THE CALLBACKS =====\n      function authEventSeen(): void {\n        // Auth event was detected. Resolve this promise and close the extra\n        // window if it's still open.\n        resolve();\n        const closeBrowserTab = cordova.plugins.browsertab?.close;\n        if (typeof closeBrowserTab === 'function') {\n          closeBrowserTab();\n        }\n        // Close inappbrowser emebedded webview in iOS7 and 8 case if still\n        // open.\n        if (typeof iabRef?.close === 'function') {\n          iabRef.close();\n        }\n      }\n\n      function resumed(): void {\n        if (onCloseTimer) {\n          // This code already ran; do not rerun.\n          return;\n        }\n\n        onCloseTimer = window.setTimeout(() => {\n          // Wait two seeconds after resume then reject.\n          reject(_createError(auth, AuthErrorCode.REDIRECT_CANCELLED_BY_USER));\n        }, REDIRECT_TIMEOUT_MS);\n      }\n\n      function visibilityChanged(): void {\n        if (document?.visibilityState === 'visible') {\n          resumed();\n        }\n      }\n\n      // ATTACH ALL THE LISTENERS =====\n      // Listen for the auth event\n      eventListener.addPassiveListener(authEventSeen);\n\n      // Listen for resume and visibility events\n      document.addEventListener('resume', resumed, false);\n      if (_isAndroid()) {\n        document.addEventListener('visibilitychange', visibilityChanged, false);\n      }\n\n      // SETUP THE CLEANUP FUNCTION =====\n      cleanup = () => {\n        eventListener.removePassiveListener(authEventSeen);\n        document.removeEventListener('resume', resumed, false);\n        document.removeEventListener(\n          'visibilitychange',\n          visibilityChanged,\n          false\n        );\n        if (onCloseTimer) {\n          window.clearTimeout(onCloseTimer);\n        }\n      };\n    });\n  } finally {\n    cleanup();\n  }\n}\n\n/**\n * Checks the configuration of the Cordova environment. This has no side effect\n * if the configuration is correct; otherwise it throws an error with the\n * missing plugin.\n */\nexport function _checkCordovaConfiguration(auth: AuthInternal): void {\n  const win = _cordovaWindow();\n  // Check all dependencies installed.\n  // https://github.com/nordnet/cordova-universal-links-plugin\n  // Note that cordova-universal-links-plugin has been abandoned.\n  // A fork with latest fixes is available at:\n  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix\n  _assert(\n    typeof win?.universalLinks?.subscribe === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-universal-links-plugin-fix'\n    }\n  );\n\n  // https://www.npmjs.com/package/cordova-plugin-buildinfo\n  _assert(\n    typeof win?.BuildInfo?.packageName !== 'undefined',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-buildInfo'\n    }\n  );\n\n  // https://github.com/google/cordova-plugin-browsertab\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.openUrl === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.isAvailable === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n\n  // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/\n  _assert(\n    typeof win?.cordova?.InAppBrowser?.open === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-inappbrowser'\n    }\n  );\n}\n\n/**\n * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only\n * available in \"secure\" contexts, which covers Cordova (which is served on a file\n * protocol).\n */\nasync function computeSha256(sessionId: string): Promise<string> {\n  const bytes = stringToArrayBuffer(sessionId);\n\n  // TODO: For IE11 crypto has a different name and this operation comes back\n  //       as an object, not a promise. This is the old proposed standard that\n  //       is used by IE11:\n  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface\n  const buf = await crypto.subtle.digest('SHA-256', bytes);\n  const arr = Array.from(new Uint8Array(buf));\n  return arr.map(num => num.toString(16).padStart(2, '0')).join('');\n}\n\nfunction stringToArrayBuffer(str: string): Uint8Array {\n  // This function is only meant to deal with an ASCII charset and makes\n  // certain simplifying assumptions.\n  debugAssert(\n    /[0-9a-zA-Z]+/.test(str),\n    'Can only convert alpha-numeric strings'\n  );\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(str);\n  }\n\n  const buff = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buff);\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n  return view;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystringDecode } from '@firebase/util';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../../core/errors';\nimport { PersistedBlob, PersistenceInternal } from '../../core/persistence';\nimport {\n  KeyName,\n  _persistenceKeyName\n} from '../../core/persistence/persistence_user_manager';\nimport { _createError } from '../../core/util/assert';\nimport { _getInstance } from '../../core/util/instantiator';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent, AuthEventType } from '../../model/popup_redirect';\nimport { browserLocalPersistence } from '../../platform_browser/persistence/local_storage';\n\nconst SESSION_ID_LENGTH = 20;\n\n/** Custom AuthEventManager that adds passive listeners to events */\nexport class CordovaAuthEventManager extends AuthEventManager {\n  private readonly passiveListeners = new Set<(e: AuthEvent) => void>();\n  private resolveInialized!: () => void;\n  private initPromise = new Promise<void>(resolve => {\n    this.resolveInialized = resolve;\n  });\n\n  addPassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.add(cb);\n  }\n\n  removePassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.delete(cb);\n  }\n\n  // In a Cordova environment, this manager can live through multiple redirect\n  // operations\n  resetRedirect(): void {\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n  }\n\n  /** Override the onEvent method */\n  onEvent(event: AuthEvent): boolean {\n    this.resolveInialized();\n    this.passiveListeners.forEach(cb => cb(event));\n    return super.onEvent(event);\n  }\n\n  async initialized(): Promise<void> {\n    await this.initPromise;\n  }\n}\n\n/**\n * Generates a (partial) {@link AuthEvent}.\n */\nexport function _generateNewEvent(\n  auth: AuthInternal,\n  type: AuthEventType,\n  eventId: string | null = null\n): AuthEvent {\n  return {\n    type,\n    eventId,\n    urlResponse: null,\n    sessionId: generateSessionId(),\n    postBody: null,\n    tenantId: auth.tenantId,\n    error: _createError(auth, AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n\nexport function _savePartialEvent(\n  auth: AuthInternal,\n  event: AuthEvent\n): Promise<void> {\n  return storage()._set(\n    persistenceKey(auth),\n    (event as object) as PersistedBlob\n  );\n}\n\nexport async function _getAndRemoveEvent(\n  auth: AuthInternal\n): Promise<AuthEvent | null> {\n  const event = (await storage()._get(\n    persistenceKey(auth)\n  )) as AuthEvent | null;\n  if (event) {\n    await storage()._remove(persistenceKey(auth));\n  }\n  return event;\n}\n\nexport function _eventFromPartialAndUrl(\n  partialEvent: AuthEvent,\n  url: string\n): AuthEvent | null {\n  // Parse the deep link within the dynamic link URL.\n  const callbackUrl = _getDeepLinkFromCallback(url);\n  // Confirm it is actually a callback URL.\n  // Currently the universal link will be of this format:\n  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>\n  // This is a fake URL but is not intended to take the user anywhere\n  // and just redirect to the app.\n  if (callbackUrl.includes('/__/auth/callback')) {\n    // Check if there is an error in the URL.\n    // This mechanism is also used to pass errors back to the app:\n    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>\n    const params = searchParamsOrEmpty(callbackUrl);\n    // Get the error object corresponding to the stringified error if found.\n    const errorObject = params['firebaseError']\n      ? parseJsonOrNull(decodeURIComponent(params['firebaseError']))\n      : null;\n    const code = errorObject?.['code']?.split('auth/')?.[1];\n    const error = code ? _createError(code) : null;\n    if (error) {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        error,\n        urlResponse: null,\n        sessionId: null,\n        postBody: null\n      };\n    } else {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        sessionId: partialEvent.sessionId,\n        urlResponse: callbackUrl,\n        postBody: null\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction generateSessionId(): string {\n  const chars = [];\n  const allowedChars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < SESSION_ID_LENGTH; i++) {\n    const idx = Math.floor(Math.random() * allowedChars.length);\n    chars.push(allowedChars.charAt(idx));\n  }\n  return chars.join('');\n}\n\nfunction storage(): PersistenceInternal {\n  return _getInstance(browserLocalPersistence);\n}\n\nfunction persistenceKey(auth: AuthInternal): string {\n  return _persistenceKeyName(KeyName.AUTH_EVENT, auth.config.apiKey, auth.name);\n}\n\nfunction parseJsonOrNull(json: string): ReturnType<typeof JSON.parse> | null {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}\n\n// Exported for testing\nexport function _getDeepLinkFromCallback(url: string): string {\n  const params = searchParamsOrEmpty(url);\n  const link = params['link'] ? decodeURIComponent(params['link']) : undefined;\n  // Double link case (automatic redirect)\n  const doubleDeepLink = searchParamsOrEmpty(link)['link'];\n  // iOS custom scheme links.\n  const iOSDeepLink = params['deep_link_id']\n    ? decodeURIComponent(params['deep_link_id'])\n    : undefined;\n  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * Optimistically tries to get search params from a string, or else returns an\n * empty search params object.\n */\nfunction searchParamsOrEmpty(url: string | undefined): Record<string, string> {\n  if (!url?.includes('?')) {\n    return {};\n  }\n\n  const [_, ...rest] = url.split('?');\n  return querystringDecode(rest.join('?')) as Record<string, string>;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../../model/public_types';\nimport { browserSessionPersistence } from '../../platform_browser/persistence/session_storage';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { AuthPopup } from '../../platform_browser/util/popup';\nimport { _createError, _fail } from '../../core/util/assert';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _checkCordovaConfiguration,\n  _generateHandlerUrl,\n  _performRedirect,\n  _validateOrigin,\n  _waitForAppResume\n} from './utils';\nimport {\n  CordovaAuthEventManager,\n  _eventFromPartialAndUrl,\n  _generateNewEvent,\n  _getAndRemoveEvent,\n  _savePartialEvent\n} from './events';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { _getRedirectResult } from '../../platform_browser/strategies/redirect';\nimport { _clearRedirectOutcomes } from '../../core/strategies/redirect';\nimport { _cordovaWindow } from '../plugins';\n\n/**\n * How long to wait for the initial auth event before concluding no\n * redirect pending\n */\nconst INITIAL_EVENT_TIMEOUT_MS = 500;\n\nclass CordovaPopupRedirectResolver implements PopupRedirectResolverInternal {\n  readonly _redirectPersistence = browserSessionPersistence;\n  readonly _shouldInitProactively = true; // This is lightweight for Cordova\n  private readonly eventManagers = new Map<string, CordovaAuthEventManager>();\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  _completeRedirectFn = _getRedirectResult;\n\n  async _initialize(auth: AuthInternal): Promise<CordovaAuthEventManager> {\n    const key = auth._key();\n    let manager = this.eventManagers.get(key);\n    if (!manager) {\n      manager = new CordovaAuthEventManager(auth);\n      this.eventManagers.set(key, manager);\n      this.attachCallbackListeners(auth, manager);\n    }\n    return manager;\n  }\n\n  _openPopup(auth: AuthInternal): Promise<AuthPopup> {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    _checkCordovaConfiguration(auth);\n    const manager = await this._initialize(auth);\n    await manager.initialized();\n\n    // Reset the persisted redirect states. This does not matter on Web where\n    // the redirect always blows away application state entirely. On Cordova,\n    // the app maintains control flow through the redirect.\n    manager.resetRedirect();\n    _clearRedirectOutcomes();\n\n    await this._originValidation(auth);\n\n    const event = _generateNewEvent(auth, authType, eventId);\n    await _savePartialEvent(auth, event);\n    const url = await _generateHandlerUrl(auth, event, provider);\n    const iabRef = await _performRedirect(url);\n    return _waitForAppResume(auth, manager, iabRef);\n  }\n\n  _isIframeWebStorageSupported(\n    _auth: AuthInternal,\n    _cb: (support: boolean) => unknown\n  ): void {\n    throw new Error('Method not implemented.');\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  private attachCallbackListeners(\n    auth: AuthInternal,\n    manager: AuthEventManager\n  ): void {\n    // Get the global plugins\n    const { universalLinks, handleOpenURL, BuildInfo } = _cordovaWindow();\n\n    const noEventTimeout = setTimeout(async () => {\n      // We didn't see that initial event. Clear any pending object and\n      // dispatch no event\n      await _getAndRemoveEvent(auth);\n      manager.onEvent(generateNoEvent());\n    }, INITIAL_EVENT_TIMEOUT_MS);\n\n    const universalLinksCb = async (\n      eventData: Record<string, string> | null\n    ): Promise<void> => {\n      // We have an event so we can clear the no event timeout\n      clearTimeout(noEventTimeout);\n\n      const partialEvent = await _getAndRemoveEvent(auth);\n      let finalEvent: AuthEvent | null = null;\n      if (partialEvent && eventData?.['url']) {\n        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);\n      }\n\n      // If finalEvent is never filled, trigger with no event\n      manager.onEvent(finalEvent || generateNoEvent());\n    };\n\n    // Universal links subscriber doesn't exist for iOS, so we need to check\n    if (\n      typeof universalLinks !== 'undefined' &&\n      typeof universalLinks.subscribe === 'function'\n    ) {\n      universalLinks.subscribe(null, universalLinksCb);\n    }\n\n    // iOS 7 or 8 custom URL schemes.\n    // This is also the current default behavior for iOS 9+.\n    // For this to work, cordova-plugin-customurlscheme needs to be installed.\n    // https://github.com/EddyVerbruggen/Custom-URL-scheme\n    // Do not overwrite the existing developer's URL handler.\n    const existingHandleOpenURL = handleOpenURL;\n    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;\n    _cordovaWindow().handleOpenURL = async url => {\n      if (url.toLowerCase().startsWith(packagePrefix)) {\n        // We want this intentionally to float\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        universalLinksCb({ url });\n      }\n      // Call the developer's handler if it is present.\n      if (typeof existingHandleOpenURL === 'function') {\n        try {\n          existingHandleOpenURL(url);\n        } catch (e) {\n          // This is a developer error. Don't stop the flow of the SDK.\n          console.error(e);\n        }\n      }\n    };\n  }\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for Cordova\n * based applications.\n *\n * @public\n */\nexport const cordovaPopupRedirectResolver: PopupRedirectResolver =\n  CordovaPopupRedirectResolver;\n\nfunction generateNoEvent(): AuthEvent {\n  return {\n    type: AuthEventType.UNKNOWN,\n    eventId: null,\n    sessionId: null,\n    urlResponse: null,\n    postBody: null,\n    tenantId: null,\n    error: _createError(AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _castAuth } from '../src/core/auth/auth_impl';\nimport { Auth } from '../src/model/public_types';\n\n/**\n * This interface is intended only for use by @firebase/auth-compat, do not use directly\n */\nexport * from '../index';\n\nexport { SignInWithIdpResponse } from '../src/api/authentication/idp';\nexport { AuthErrorCode } from '../src/core/errors';\nexport { PersistenceInternal } from '../src/core/persistence';\nexport { _persistenceKeyName } from '../src/core/persistence/persistence_user_manager';\nexport { UserImpl } from '../src/core/user/user_impl';\nexport { _getInstance } from '../src/core/util/instantiator';\nexport {\n  PopupRedirectResolverInternal,\n  EventManager,\n  AuthEventType\n} from '../src/model/popup_redirect';\nexport { UserCredentialInternal, UserParameters } from '../src/model/user';\nexport { AuthInternal, ConfigInternal } from '../src/model/auth';\nexport { DefaultConfig, AuthImpl, _castAuth } from '../src/core/auth/auth_impl';\n\nexport { ClientPlatform, _getClientVersion } from '../src/core/util/version';\n\nexport { _generateEventId } from '../src/core/util/event_id';\nexport { TaggedWithTokenResponse } from '../src/model/id_token';\nexport { _fail, _assert } from '../src/core/util/assert';\nexport { AuthPopup } from '../src/platform_browser/util/popup';\nexport { _getRedirectResult } from '../src/platform_browser/strategies/redirect';\nexport { cordovaPopupRedirectResolver } from '../src/platform_cordova/popup_redirect/popup_redirect';\nexport { FetchProvider } from '../src/core/util/fetch_provider';\nexport { SAMLAuthCredential } from '../src/core/credentials/saml';\n\n// This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out\n// of autogenerated documentation pages to reduce accidental misuse.\nexport function addFrameworkForLogging(auth: Auth, framework: string): void {\n  _castAuth(auth)._logFramework(framework);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as impl from '@firebase/auth/internal';\nimport {\n  getUA,\n  isBrowserExtension,\n  isReactNative,\n  isNode,\n  isIE,\n  isIndexedDBAvailable\n} from '@firebase/util';\n\ndeclare global {\n  interface Document {\n    documentMode?: number;\n  }\n}\n\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\n\nfunction _getCurrentScheme(): string | null {\n  return self?.location?.protocol || null;\n}\n\n/**\n * @return {boolean} Whether the current environment is http or https.\n */\nfunction _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\n/**\n * @param {?string=} ua The user agent.\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\n *     Cordova environment.\n */\nexport function _isAndroidOrIosCordovaScheme(ua: string = getUA()): boolean {\n  return !!(\n    (_getCurrentScheme() === 'file:' || _getCurrentScheme() === 'ionic:') &&\n    ua.toLowerCase().match(/iphone|ipad|ipod|android/)\n  );\n}\n\n/**\n * @return {boolean} Whether the environment is a native environment, where\n *     CORS checks do not apply.\n */\nfunction _isNativeEnvironment(): boolean {\n  return isReactNative() || isNode();\n}\n\n/**\n * Checks whether the user agent is IE11.\n * @return {boolean} True if it is IE11.\n */\nfunction _isIe11(): boolean {\n  return isIE() && document?.documentMode === 11;\n}\n\n/**\n * Checks whether the user agent is Edge.\n * @param {string} userAgent The browser user agent string.\n * @return {boolean} True if it is Edge.\n */\nfunction _isEdge(ua: string = getUA()): boolean {\n  return /Edge\\/\\d+/.test(ua);\n}\n\n/**\n * @param {?string=} opt_userAgent The navigator user agent.\n * @return {boolean} Whether local storage is not synchronized between an iframe\n *     and a popup of the same domain.\n */\nfunction _isLocalStorageNotSynchronized(ua: string = getUA()): boolean {\n  return _isIe11() || _isEdge(ua);\n}\n\n/** @return {boolean} Whether web storage is supported. */\nexport function _isWebStorageSupported(): boolean {\n  try {\n    const storage = self.localStorage;\n    const key = impl._generateEventId();\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key);\n      // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n  return false;\n}\n\n/**\n * @param {?Object=} global The optional global scope.\n * @return {boolean} Whether current environment is a worker.\n */\nexport function _isWorker(): boolean {\n  // WorkerGlobalScope only defined in worker environment.\n  return (\n    typeof global !== 'undefined' &&\n    'WorkerGlobalScope' in global &&\n    'importScripts' in global\n  );\n}\n\nexport function _isPopupRedirectSupported(): boolean {\n  return (\n    (_isHttpOrHttps() ||\n      isBrowserExtension() ||\n      _isAndroidOrIosCordovaScheme()) &&\n    // React Native with remote debugging reports its location.protocol as\n    // http.\n    !_isNativeEnvironment() &&\n    // Local storage has to be supported for browser popup and redirect\n    // operations to work.\n    _isWebStorageSupported() &&\n    // DOM, popups and redirects are not supported within a worker.\n    !_isWorker()\n  );\n}\n\n/** Quick check that indicates the platform *may* be Cordova */\nexport function _isLikelyCordova(): boolean {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\n\nexport async function _isCordova(): Promise<boolean> {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\n\nexport function _getSelfWindow(): Window | null {\n  return typeof window !== 'undefined' ? window : null;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { isIndexedDBAvailable, isNode, isReactNative } from '@firebase/util';\nimport { _getSelfWindow, _isWebStorageSupported, _isWorker } from './platform';\n\nexport const Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\n\nconst _assert: typeof exp._assert = exp._assert;\n\nconst PERSISTENCE_KEY = 'persistence';\n\n/**\n * Validates that an argument is a valid persistence value. If an invalid type\n * is specified, an error is thrown synchronously.\n */\nexport function _validatePersistenceArgument(\n  auth: exp.Auth,\n  persistence: string\n): void {\n  _assert(\n    Object.values(Persistence).includes(persistence),\n    auth,\n    exp.AuthErrorCode.INVALID_PERSISTENCE\n  );\n  // Validate if the specified type is supported in the current environment.\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert(\n      persistence !== Persistence.SESSION,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert(\n      persistence === Persistence.NONE,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert(\n      persistence === Persistence.NONE ||\n        (persistence === Persistence.LOCAL && isIndexedDBAvailable()),\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  // This is restricted by what the browser supports.\n  _assert(\n    persistence === Persistence.NONE || _isWebStorageSupported(),\n    auth,\n    exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n  );\n}\n\nexport async function _savePersistenceForRedirect(\n  auth: exp.AuthInternal\n): Promise<void> {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n  const key = exp._persistenceKeyName(\n    PERSISTENCE_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\n\nexport function _getPersistencesFromRedirect(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  const session = getSessionStorageIfAvailable();\n  if (!session) {\n    return [];\n  }\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n  const persistence = session.getItem(key);\n\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n    default:\n      return [];\n  }\n}\n\n/** Returns session storage, or null if the property access errors */\nfunction getSessionStorageIfAvailable(): Storage | null {\n  try {\n    return _getSelfWindow()?.sessionStorage || null;\n  } catch (e) {\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { _isCordova, _isLikelyCordova } from './platform';\n\nconst _assert: typeof exp._assert = exp._assert;\n\n/** Platform-agnostic popup-redirect resolver */\nexport class CompatPopupRedirectResolver\n  implements exp.PopupRedirectResolverInternal\n{\n  // Create both resolvers for dynamic resolution later\n  private readonly browserResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.browserPopupRedirectResolver);\n  private readonly cordovaResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.cordovaPopupRedirectResolver);\n  // The actual resolver in use: either browserResolver or cordovaResolver.\n  private underlyingResolver: exp.PopupRedirectResolverInternal | null = null;\n  _redirectPersistence = exp.browserSessionPersistence;\n\n  _completeRedirectFn: (\n    auth: exp.Auth,\n    resolver: exp.PopupRedirectResolver,\n    bypassAuthState: boolean\n  ) => Promise<exp.UserCredential | null> = exp._getRedirectResult;\n\n  async _initialize(auth: exp.AuthImpl): Promise<exp.EventManager> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n\n  async _openPopup(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<exp.AuthPopup> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  async _openRedirect(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  _isIframeWebStorageSupported(\n    auth: exp.AuthImpl,\n    cb: (support: boolean) => unknown\n  ): void {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n\n  _originValidation(auth: exp.Auth): Promise<void> {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n\n  get _shouldInitProactively(): boolean {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n\n  private get assertedUnderlyingResolver(): exp.PopupRedirectResolverInternal {\n    _assert(this.underlyingResolver, exp.AuthErrorCode.INTERNAL_ERROR);\n    return this.underlyingResolver;\n  }\n\n  private async selectUnderlyingResolver(): Promise<void> {\n    if (this.underlyingResolver) {\n      return;\n    }\n\n    // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova\n      ? this.cordovaResolver\n      : this.browserResolver;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Forward direction wrapper from Compat --unwrap-> Exp */\nexport interface Wrapper<T> {\n  unwrap(): T;\n}\n\n/** Reverse direction wrapper from Exp --wrapped--> Compat */\nexport interface ReverseWrapper<T> {\n  wrapped(): T;\n}\n\nexport function unwrap<T>(object: unknown): T {\n  return (object as Wrapper<T>).unwrap();\n}\n\nexport function wrapped<T>(object: unknown): T {\n  return (object as ReverseWrapper<T>).wrapped();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { FirebaseError } from '@firebase/util';\nimport { Auth } from './auth';\nimport { User } from './user';\nimport { unwrap, wrapped } from './wrap';\n\nfunction credentialFromResponse(\n  userCredential: exp.UserCredentialInternal\n): exp.AuthCredential | null {\n  return credentialFromObject(userCredential);\n}\n\nfunction attachExtraErrorFields(auth: exp.Auth, e: FirebaseError): void {\n  // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n  const response = (e.customData as exp.TaggedWithTokenResponse | undefined)\n    ?._tokenResponse as unknown as Record<string, string>;\n  if (e.code === 'auth/multi-factor-auth-required') {\n    const mfaErr = e as compat.MultiFactorError;\n    mfaErr.resolver = new MultiFactorResolver(\n      auth,\n      exp.getMultiFactorResolver(auth, e as exp.MultiFactorError)\n    );\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e as compat.AuthError;\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\n\nfunction credentialFromObject(\n  object: FirebaseError | exp.UserCredential\n): exp.AuthCredential | null {\n  const { _tokenResponse } = (\n    object instanceof FirebaseError ? object.customData : object\n  ) as exp.TaggedWithTokenResponse;\n  if (!_tokenResponse) {\n    return null;\n  }\n\n  // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n\n  const providerId = _tokenResponse.providerId;\n\n  // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n\n  let provider: Pick<\n    typeof exp.OAuthProvider,\n    'credentialFromResult' | 'credentialFromError'\n  >;\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse as exp.SignInWithIdpResponse;\n      if (\n        !oauthAccessToken &&\n        !oauthTokenSecret &&\n        !oauthIdToken &&\n        !pendingToken\n      ) {\n        return null;\n      }\n      // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n\n  return object instanceof FirebaseError\n    ? provider.credentialFromError(object)\n    : provider.credentialFromResult(object);\n}\n\nexport function convertCredential(\n  auth: exp.Auth,\n  credentialPromise: Promise<exp.UserCredential>\n): Promise<compat.UserCredential> {\n  return credentialPromise\n    .catch(e => {\n      if (e instanceof FirebaseError) {\n        attachExtraErrorFields(auth, e);\n      }\n      throw e;\n    })\n    .then(credential => {\n      const operationType = credential.operationType;\n      const user = credential.user;\n\n      return {\n        operationType,\n        credential: credentialFromResponse(\n          credential as exp.UserCredentialInternal\n        ),\n        additionalUserInfo: exp.getAdditionalUserInfo(\n          credential as exp.UserCredential\n        ),\n        user: User.getOrCreate(user)\n      };\n    });\n}\n\nexport async function convertConfirmationResult(\n  auth: exp.Auth,\n  confirmationResultPromise: Promise<exp.ConfirmationResult>\n): Promise<compat.ConfirmationResult> {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: (verificationCode: string) =>\n      convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\n\nclass MultiFactorResolver implements compat.MultiFactorResolver {\n  readonly auth: Auth;\n  constructor(\n    auth: exp.Auth,\n    private readonly resolver: exp.MultiFactorResolver\n  ) {\n    this.auth = wrapped(auth);\n  }\n\n  get session(): compat.MultiFactorSession {\n    return this.resolver.session;\n  }\n\n  get hints(): compat.MultiFactorInfo[] {\n    return this.resolver.hints;\n  }\n\n  resolveSignIn(\n    assertion: compat.MultiFactorAssertion\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      unwrap(this.auth),\n      this.resolver.resolveSignIn(assertion as exp.MultiFactorAssertion)\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\nimport { _savePersistenceForRedirect } from './persistence';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\n\nexport class User implements compat.User, Compat<exp.User> {\n  // Maintain a map so that there's always a 1:1 mapping between new User and\n  // legacy compat users\n  private static readonly USER_MAP = new WeakMap<exp.User, User>();\n\n  readonly multiFactor: compat.MultiFactorUser;\n\n  private constructor(readonly _delegate: exp.User) {\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n\n  static getOrCreate(user: exp.User): User {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n\n    return User.USER_MAP.get(user)!;\n  }\n\n  delete(): Promise<void> {\n    return this._delegate.delete();\n  }\n  reload(): Promise<void> {\n    return this._delegate.reload();\n  }\n  toJSON(): object {\n    return this._delegate.toJSON();\n  }\n  getIdTokenResult(forceRefresh?: boolean): Promise<compat.IdTokenResult> {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n  getIdToken(forceRefresh?: boolean): Promise<string> {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n  linkAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.linkWithCredential(credential);\n  }\n  async linkWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  async linkWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier)\n    );\n  }\n  async linkWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async linkWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  reauthenticateAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.reauthenticateWithCredential(credential);\n  }\n  async reauthenticateWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth as unknown as exp.Auth,\n      exp.reauthenticateWithCredential(\n        this._delegate,\n        credential as exp.AuthCredential\n      )\n    );\n  }\n  reauthenticateWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.reauthenticateWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  reauthenticateWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.reauthenticateWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async reauthenticateWithRedirect(\n    provider: compat.AuthProvider\n  ): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  sendEmailVerification(\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n  async unlink(providerId: string): Promise<compat.User> {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n  updateEmail(newEmail: string): Promise<void> {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n  updatePassword(newPassword: string): Promise<void> {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n  updatePhoneNumber(phoneCredential: compat.AuthCredential): Promise<void> {\n    return exp.updatePhoneNumber(\n      this._delegate,\n      phoneCredential as exp.PhoneAuthCredential\n    );\n  }\n  updateProfile(profile: {\n    displayName?: string | null;\n    photoURL?: string | null;\n  }): Promise<void> {\n    return exp.updateProfile(this._delegate, profile);\n  }\n  verifyBeforeUpdateEmail(\n    newEmail: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.verifyBeforeUpdateEmail(\n      this._delegate,\n      newEmail,\n      actionCodeSettings\n    );\n  }\n  get emailVerified(): boolean {\n    return this._delegate.emailVerified;\n  }\n  get isAnonymous(): boolean {\n    return this._delegate.isAnonymous;\n  }\n  get metadata(): compat.UserMetadata {\n    return this._delegate.metadata;\n  }\n  get phoneNumber(): string | null {\n    return this._delegate.phoneNumber;\n  }\n  get providerData(): Array<compat.UserInfo | null> {\n    return this._delegate.providerData;\n  }\n  get refreshToken(): string {\n    return this._delegate.refreshToken;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  get displayName(): string | null {\n    return this._delegate.displayName;\n  }\n  get email(): string | null {\n    return this._delegate.email;\n  }\n  get photoURL(): string | null {\n    return this._delegate.photoURL;\n  }\n  get providerId(): string {\n    return this._delegate.providerId;\n  }\n  get uid(): string {\n    return this._delegate.uid;\n  }\n  private get auth(): exp.Auth {\n    return (this._delegate as exp.UserImpl).auth as unknown as exp.Auth;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, Observer, Unsubscribe } from '@firebase/util';\n\nimport {\n  _validatePersistenceArgument,\n  Persistence,\n  _getPersistencesFromRedirect,\n  _savePersistenceForRedirect\n} from './persistence';\nimport { _isPopupRedirectSupported } from './platform';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport { User } from './user';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\nimport { ReverseWrapper, Wrapper } from './wrap';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class Auth\n  implements compat.FirebaseAuth, Wrapper<exp.Auth>, _FirebaseService\n{\n  static Persistence = Persistence;\n  readonly _delegate: exp.AuthImpl;\n\n  constructor(readonly app: FirebaseApp, provider: Provider<'auth'>) {\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate() as exp.AuthImpl;\n      this.linkUnderlyingAuth();\n      return;\n    }\n\n    const { apiKey } = app.options;\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // Only use a popup/redirect resolver in browser environments\n    const resolver =\n      typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    }) as exp.AuthImpl;\n\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n    this.linkUnderlyingAuth();\n  }\n\n  get emulatorConfig(): compat.EmulatorConfig | null {\n    return this._delegate.emulatorConfig;\n  }\n\n  get currentUser(): compat.User | null {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n  get languageCode(): string | null {\n    return this._delegate.languageCode;\n  }\n  set languageCode(languageCode: string | null) {\n    this._delegate.languageCode = languageCode;\n  }\n  get settings(): compat.AuthSettings {\n    return this._delegate.settings;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  set tenantId(tid: string | null) {\n    this._delegate.tenantId = tid;\n  }\n  useDeviceLanguage(): void {\n    this._delegate.useDeviceLanguage();\n  }\n  signOut(): Promise<void> {\n    return this._delegate.signOut();\n  }\n  useEmulator(url: string, options?: { disableWarnings: boolean }): void {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n  applyActionCode(code: string): Promise<void> {\n    return exp.applyActionCode(this._delegate, code);\n  }\n\n  checkActionCode(code: string): Promise<compat.ActionCodeInfo> {\n    return exp.checkActionCode(this._delegate, code);\n  }\n\n  confirmPasswordReset(code: string, newPassword: string): Promise<void> {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n\n  async createUserWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.createUserWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  fetchProvidersForEmail(email: string): Promise<string[]> {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n  fetchSignInMethodsForEmail(email: string): Promise<string[]> {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n  isSignInWithEmailLink(emailLink: string): boolean {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n  async getRedirectResult(): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const credential = await exp.getRedirectResult(\n      this._delegate,\n      CompatPopupRedirectResolver\n    );\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  }\n\n  // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n  addFrameworkForLogging(framework: string): void {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onAuthStateChanged(next!, error, complete);\n  }\n  onIdTokenChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onIdTokenChanged(next!, error, complete);\n  }\n  sendSignInLinkToEmail(\n    email: string,\n    actionCodeSettings: compat.ActionCodeSettings\n  ): Promise<void> {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n  sendPasswordResetEmail(\n    email: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendPasswordResetEmail(\n      this._delegate,\n      email,\n      actionCodeSettings || undefined\n    );\n  }\n  async setPersistence(persistence: string): Promise<void> {\n    _validatePersistenceArgument(this._delegate, persistence);\n    let converted;\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp\n          ._getInstance<exp.PersistenceInternal>(exp.indexedDBLocalPersistence)\n          ._isAvailable();\n        converted = isIndexedDBFullySupported\n          ? exp.indexedDBLocalPersistence\n          : exp.browserLocalPersistence;\n        break;\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n      default:\n        return exp._fail(exp.AuthErrorCode.ARGUMENT_ERROR, {\n          appName: this._delegate.name\n        });\n    }\n\n    return this._delegate.setPersistence(converted);\n  }\n\n  signInAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.signInWithCredential(credential);\n  }\n  signInAnonymously(): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInAnonymously(this._delegate)\n    );\n  }\n  signInWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  signInWithCustomToken(token: string): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCustomToken(this._delegate, token)\n    );\n  }\n  signInWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  signInWithEmailLink(\n    email: string,\n    emailLink?: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailLink(this._delegate, email, emailLink)\n    );\n  }\n  signInWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this._delegate,\n      exp.signInWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  async signInWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    return convertCredential(\n      this._delegate,\n      exp.signInWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async signInWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  updateCurrentUser(user: compat.User | null): Promise<void> {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n  verifyPasswordResetCode(code: string): Promise<string> {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n  unwrap(): exp.Auth {\n    return this._delegate;\n  }\n  _delete(): Promise<void> {\n    return this._delegate._delete();\n  }\n  private linkUnderlyingAuth(): void {\n    (this._delegate as unknown as ReverseWrapper<Auth>).wrapped = () => this;\n  }\n}\n\nfunction wrapObservers(\n  nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n  error?: (error: compat.Error) => unknown,\n  complete?: Unsubscribe\n): Partial<Observer<exp.User | null>> {\n  let next = nextOrObserver;\n  if (typeof nextOrObserver !== 'function') {\n    ({ next, error, complete } = nextOrObserver);\n  }\n\n  // We know 'next' is now a function\n  const oldNext = next as (a: compat.User | null) => unknown;\n\n  const newNext = (user: exp.User | null): unknown =>\n    oldNext(user && User.getOrCreate(user as exp.User));\n  return {\n    next: newNext,\n    error: error as ErrorFn,\n    complete\n  };\n}\n\nfunction buildPersistenceHierarchy(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName);\n\n  // If \"self\" is available, add indexedDB\n  if (\n    typeof self !== 'undefined' &&\n    !persistences.includes(exp.indexedDBLocalPersistence)\n  ) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  }\n\n  // If \"window\" is available, add HTML Storage persistences\n  if (typeof window !== 'undefined') {\n    for (const persistence of [\n      exp.browserLocalPersistence,\n      exp.browserSessionPersistence\n    ]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  }\n\n  // Add in-memory as a final fallback\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n\n  return persistences;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport firebase from '@firebase/app-compat';\nimport { Compat } from '@firebase/util';\nimport { unwrap } from './wrap';\n\nexport class PhoneAuthProvider\n  implements compat.PhoneAuthProvider, Compat<exp.PhoneAuthProvider>\n{\n  providerId = 'phone';\n  readonly _delegate: exp.PhoneAuthProvider;\n\n  static PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\n  static PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): compat.AuthCredential {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n\n  constructor() {\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth!()));\n  }\n\n  verifyPhoneNumber(\n    phoneInfoOptions:\n      | string\n      | compat.PhoneSingleFactorInfoOptions\n      | compat.PhoneMultiFactorEnrollInfoOptions\n      | compat.PhoneMultiFactorSignInInfoOptions,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<string> {\n    return this._delegate.verifyPhoneNumber(\n      // The implementation matches but the types are subtly incompatible\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      phoneInfoOptions as any,\n      applicationVerifier\n    );\n  }\n\n  unwrap(): exp.PhoneAuthProvider {\n    return this._delegate;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { FirebaseApp } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class RecaptchaVerifier\n  implements compat.RecaptchaVerifier, Compat<exp.ApplicationVerifier>\n{\n  readonly _delegate: exp.RecaptchaVerifier;\n  type: string;\n  constructor(\n    container: HTMLElement | string,\n    parameters?: object | null,\n    app: FirebaseApp = firebase.app()\n  ) {\n    // API key is required for web client RPC calls.\n    _assert(app.options?.apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n    this._delegate = new exp.RecaptchaVerifier(\n      container,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parameters as any,\n\n      // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n      // @ts-ignore\n      app.auth!()\n    );\n    this.type = this._delegate.type;\n  }\n  clear(): void {\n    this._delegate.clear();\n  }\n  render(): Promise<number> {\n    return this._delegate.render();\n  }\n  verify(): Promise<string> {\n    return this._delegate.verify();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport * as impl from '@firebase/auth/internal';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { FirebaseError } from '@firebase/util';\n\nimport * as types from '@firebase/auth-types';\nimport { name, version } from './package.json';\nimport { Auth } from './src/auth';\nimport { PhoneAuthProvider as CompatAuthProvider } from './src/phone_auth_provider';\nimport { RecaptchaVerifier as CompatRecaptchaVerifier } from './src/recaptcha_verifier';\n\nconst AUTH_TYPE = 'auth-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'auth-compat': types.FirebaseAuth;\n  }\n}\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    auth: {\n      (app?: FirebaseApp): types.FirebaseAuth;\n      Auth: typeof types.FirebaseAuth;\n      EmailAuthProvider: typeof types.EmailAuthProvider;\n      EmailAuthProvider_Instance: typeof types.EmailAuthProvider_Instance;\n      FacebookAuthProvider: typeof types.FacebookAuthProvider;\n      FacebookAuthProvider_Instance: typeof types.FacebookAuthProvider_Instance;\n      GithubAuthProvider: typeof types.GithubAuthProvider;\n      GithubAuthProvider_Instance: typeof types.GithubAuthProvider_Instance;\n      GoogleAuthProvider: typeof types.GoogleAuthProvider;\n      GoogleAuthProvider_Instance: typeof types.GoogleAuthProvider_Instance;\n      OAuthProvider: typeof types.OAuthProvider;\n      SAMLAuthProvider: typeof types.SAMLAuthProvider;\n      PhoneAuthProvider: typeof types.PhoneAuthProvider;\n      PhoneAuthProvider_Instance: typeof types.PhoneAuthProvider_Instance;\n      PhoneMultiFactorGenerator: typeof types.PhoneMultiFactorGenerator;\n      RecaptchaVerifier: typeof types.RecaptchaVerifier;\n      RecaptchaVerifier_Instance: typeof types.RecaptchaVerifier_Instance;\n      TwitterAuthProvider: typeof types.TwitterAuthProvider;\n      TwitterAuthProvider_Instance: typeof types.TwitterAuthProvider_Instance;\n    };\n  }\n  interface FirebaseApp {\n    auth?(): types.FirebaseAuth;\n  }\n}\n\n// Create auth components to register with firebase.\n// Provides Auth public APIs.\nfunction registerAuthCompat(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      AUTH_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app-compat').getImmediate();\n        const authProvider = container.getProvider('auth');\n        return new Auth(app, authProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ActionCodeInfo: {\n          Operation: {\n            EMAIL_SIGNIN: impl.ActionCodeOperation.EMAIL_SIGNIN,\n            PASSWORD_RESET: impl.ActionCodeOperation.PASSWORD_RESET,\n            RECOVER_EMAIL: impl.ActionCodeOperation.RECOVER_EMAIL,\n            REVERT_SECOND_FACTOR_ADDITION:\n              impl.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n            VERIFY_AND_CHANGE_EMAIL:\n              impl.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n            VERIFY_EMAIL: impl.ActionCodeOperation.VERIFY_EMAIL\n          }\n        },\n        EmailAuthProvider: impl.EmailAuthProvider,\n        FacebookAuthProvider: impl.FacebookAuthProvider,\n        GithubAuthProvider: impl.GithubAuthProvider,\n        GoogleAuthProvider: impl.GoogleAuthProvider,\n        OAuthProvider: impl.OAuthProvider,\n        SAMLAuthProvider: impl.SAMLAuthProvider,\n        PhoneAuthProvider: CompatAuthProvider,\n        PhoneMultiFactorGenerator: impl.PhoneMultiFactorGenerator,\n        RecaptchaVerifier: CompatRecaptchaVerifier,\n        TwitterAuthProvider: impl.TwitterAuthProvider,\n        Auth,\n        AuthCredential: impl.AuthCredential,\n        Error: FirebaseError\n      })\n      .setInstantiationMode(InstantiationMode.LAZY)\n      .setMultipleInstances(false)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterAuthCompat(firebase as _FirebaseNamespace);\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nconst logClient = new Logger('@firebase/database-compat');\n\nexport const warn = function (msg: string) {\n  const message = 'FIREBASE WARNING: ' + msg;\n  logClient.warn(message);\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorPrefix as errorPrefixFxn } from '@firebase/util';\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentName: string,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, 'eventType') +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect as ModularOnDisconnect } from '@firebase/database';\nimport { validateArgCount, validateCallback, Compat } from '@firebase/util';\n\nimport { warn } from '../util/util';\nexport class OnDisconnect implements Compat<ModularOnDisconnect> {\n  constructor(readonly _delegate: ModularOnDisconnect) {}\n\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n    const result = this._delegate.cancel();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n    const result = this._delegate.remove();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n    const result = this._delegate.set(value);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'OnDisconnect.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n    const result = this._delegate.setWithPriority(value, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    objectToMerge: Record<string, unknown>,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n    const result = this._delegate.update(objectToMerge);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount } from '@firebase/util';\n\nimport { DataSnapshot } from './Reference';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OnDisconnect as ModularOnDisconnect,\n  off,\n  onChildAdded,\n  onChildChanged,\n  onChildMoved,\n  onChildRemoved,\n  onValue,\n  EventType,\n  limitToFirst,\n  query,\n  limitToLast,\n  orderByChild,\n  orderByKey,\n  orderByValue,\n  orderByPriority,\n  startAt,\n  startAfter,\n  endAt,\n  endBefore,\n  equalTo,\n  get,\n  set,\n  update,\n  setWithPriority,\n  remove,\n  setPriority,\n  push,\n  runTransaction,\n  child,\n  DataSnapshot as ModularDataSnapshot,\n  Query as ExpQuery,\n  DatabaseReference as ModularReference,\n  _QueryImpl,\n  _ReferenceImpl,\n  _validatePathString,\n  _validateWritablePath,\n  _UserCallback,\n  _QueryParams\n} from '@firebase/database';\nimport {\n  Compat,\n  Deferred,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\n\nimport { warn } from '../util/util';\nimport { validateBoolean, validateEventType } from '../util/validation';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot implements Compat<ModularDataSnapshot> {\n  constructor(\n    readonly _database: Database,\n    readonly _delegate: ModularDataSnapshot\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @returns Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param path - Path to a child.\n   * @returns DataSnapshot for child node.\n   */\n  child(path: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    path = String(path);\n    _validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param path - Path to a child.\n   * @returns Whether the child exists.\n   */\n  hasChild(path: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    _validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @returns The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param action - Callback function to be called\n   * for each child.\n   * @returns True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (snapshot: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(expDataSnapshot =>\n      action(new DataSnapshot(this._database, expDataSnapshot))\n    );\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  }\n\n  get key() {\n    return this._delegate.key;\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @returns The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  }\n\n  /**\n   * @returns The Firebase reference for the location this snapshot's data came\n   * from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n\nexport interface SnapshotCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query implements Compat<ExpQuery> {\n  constructor(readonly database: Database, readonly _delegate: ExpQuery) {}\n\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n    const valueCallback = (expSnapshot, previousChildName?) => {\n      callback.call(\n        ret.context,\n        new DataSnapshot(this.database, expSnapshot),\n        previousChildName\n      );\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = ret.cancel?.bind(ret.context);\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      default:\n        throw new Error(\n          errorPrefix('Query.on', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n  }\n\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n    if (callback) {\n      const valueCallback: _UserCallback = () => {};\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType as EventType, valueCallback);\n    } else {\n      off(this._delegate, eventType as EventType | undefined);\n    }\n  }\n\n  /**\n   * Get the server-value for this query, or return a cached value if not connected.\n   */\n  get(): Promise<DataSnapshot> {\n    return get(this._delegate).then(expSnapshot => {\n      return new DataSnapshot(this.database, expSnapshot);\n    });\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   */\n  once(\n    eventType: string,\n    callback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n    const deferred = new Deferred<DataSnapshot>();\n    const valueCallback: _UserCallback = (expSnapshot, previousChildName?) => {\n      const result = new DataSnapshot(this.database, expSnapshot);\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n      deferred.resolve(result);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = (error: Error) => {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n      deferred.reject(error);\n    };\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      default:\n        throw new Error(\n          errorPrefix('Query.once', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  }\n\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAt(value, name))\n    );\n  }\n\n  startAfter(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAfter(value, name))\n    );\n  }\n\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  }\n\n  endBefore(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, endBefore(value, name))\n    );\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, equalTo(value, name))\n    );\n  }\n\n  /**\n   * @returns URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param fnName - The function name (on or once)\n   *\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | undefined; context: object | undefined } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: undefined, context: undefined };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 'cancelOrContext') +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return new Reference(\n      this.database,\n      new _ReferenceImpl(this._delegate._repo, this._delegate._path)\n    );\n  }\n}\n\nexport class Reference extends Query implements Compat<ModularReference> {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   */\n  constructor(\n    readonly database: Database,\n    readonly _delegate: ModularReference\n  ) {\n    super(\n      database,\n      new _QueryImpl(\n        _delegate._repo,\n        _delegate._path,\n        new _QueryParams(),\n        false\n      )\n    );\n  }\n\n  /** @returns {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  }\n\n  child(pathString: string): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n    return new Reference(this.database, child(this._delegate, pathString));\n  }\n\n  /** @returns {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    const parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  }\n\n  /** @returns {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  }\n\n  set(\n    newVal: unknown,\n    onComplete?: (error: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    const result = set(this._delegate, newVal);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    values: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n\n    if (Array.isArray(values)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n      values = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    _validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n\n    const result = update(this._delegate, values);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'Reference.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n\n    const result = setWithPriority(this._delegate, newVal, newPriority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n\n    const result = remove(this._delegate);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  transaction(\n    transactionUpdate: (currentData: unknown) => unknown,\n    onComplete?: (\n      error: Error | null,\n      committed: boolean,\n      dataSnapshot: DataSnapshot | null\n    ) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback(\n      'Reference.transaction',\n      'transactionUpdate',\n      transactionUpdate,\n      false\n    );\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean(\n      'Reference.transaction',\n      'applyLocally',\n      applyLocally,\n      true\n    );\n\n    const result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally\n    }).then(\n      transactionResult =>\n        new TransactionResult(\n          transactionResult.committed,\n          new DataSnapshot(this.database, transactionResult.snapshot)\n        )\n    );\n    if (onComplete) {\n      result.then(\n        transactionResult =>\n          onComplete(\n            null,\n            transactionResult.committed,\n            transactionResult.snapshot\n          ),\n        error => onComplete(error, false, null)\n      );\n    }\n    return result;\n  }\n\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n\n    const result = setPriority(this._delegate, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n\n    const expPromise = push(this._delegate, value);\n    const promise = expPromise.then(\n      expRef => new Reference(this.database, expRef)\n    );\n\n    if (onComplete) {\n      promise.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n\n    const result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  }\n\n  onDisconnect(): OnDisconnect {\n    _validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(\n      new ModularOnDisconnect(this._delegate._repo, this._delegate._path)\n    );\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  goOnline,\n  connectDatabaseEmulator,\n  goOffline,\n  ref,\n  refFromURL,\n  increment,\n  serverTimestamp,\n  Database as ModularDatabase\n} from '@firebase/database';\nimport {\n  validateArgCount,\n  Compat,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { Reference } from './Reference';\n\n/**\n * Class representing a firebase database.\n */\nexport class Database implements FirebaseService, Compat<ModularDatabase> {\n  static readonly ServerValue = {\n    TIMESTAMP: serverTimestamp(),\n    increment: (delta: number) => increment(delta)\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   */\n  constructor(readonly _delegate: ModularDatabase, readonly app: FirebaseApp) {}\n\n  INTERNAL = {\n    delete: () => this._delegate._delete()\n  };\n\n  /**\n   * Modify this instance to communicate with the Realtime Database emulator.\n   *\n   * <p>Note: This method must be called before performing any other operation.\n   *\n   * @param host - the emulator host (ex: localhost)\n   * @param port - the emulator port (ex: 8080)\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n   */\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions;\n    } = {}\n  ): void {\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param path - The relative string path or an existing Reference to a database\n   * location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @returns Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      const childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      const childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @returns Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    const apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  }\n\n  // Make individual repo go offline.\n  goOffline(): void {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  }\n\n  goOnline(): void {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  Provider\n} from '@firebase/component';\nimport {\n  _repoManagerDatabaseFromApp,\n  _setSDKVersion\n} from '@firebase/database';\nimport * as types from '@firebase/database-types';\n\nimport { Database } from './Database';\n\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n *\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAuthImpl - custom auth implementation\n */\nexport function initStandalone<T>({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  namespace,\n  nodeAdmin = false\n}: {\n  app: FirebaseApp;\n  url: string;\n  version: string;\n  customAuthImpl: FirebaseAuthInternal;\n  namespace: T;\n  nodeAdmin?: boolean;\n}): {\n  instance: types.Database;\n  namespace: T;\n} {\n  _setSDKVersion(version);\n\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const authProvider = new Provider<FirebaseAuthInternalName>(\n    'auth-internal',\n    new ComponentContainer('database-standalone')\n  );\n  authProvider.setComponent(\n    new Component('auth-internal', () => customAuthImpl, ComponentType.PRIVATE)\n  );\n\n  return {\n    instance: new Database(\n      _repoManagerDatabaseFromApp(\n        app,\n        authProvider,\n        /* appCheckProvider= */ undefined,\n        url,\n        nodeAdmin\n      ),\n      app\n    ) as types.Database,\n    namespace\n  };\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase, { FirebaseNamespace } from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport { enableLogging } from '@firebase/database';\nimport * as types from '@firebase/database-types';\n\nimport { name, version } from '../package.json';\nimport { Database } from '../src/api/Database';\nimport * as INTERNAL from '../src/api/internal';\nimport { DataSnapshot, Query, Reference } from '../src/api/Reference';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // Register the Database Service with the 'firebase' namespace.\n  (instance as unknown as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database-compat',\n      (container, { instanceIdentifier: url }) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app-compat').getImmediate();\n        const databaseExp = container\n          .getProvider('database')\n          .getImmediate({ identifier: url });\n        return new Database(databaseExp, app);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterDatabase(firebase);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirestoreError } from '@firebase/firestore';\nimport { SetOptions } from '@firebase/firestore-types';\n\nexport function validateSetOptions(\n  methodName: string,\n  options: SetOptions | undefined\n): SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      'invalid-argument',\n      `Invalid options passed to function ${methodName}(): You cannot ` +\n        'specify both \"merge\" and \"mergeFields\".'\n    );\n  }\n\n  return options;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Bytes, FirestoreError, _isBase64Available } from '@firebase/firestore';\nimport { Compat } from '@firebase/util';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      'unimplemented',\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!_isBase64Available()) {\n    throw new FirestoreError(\n      'unimplemented',\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/** Immutable class holding a blob (binary data) */\nexport class Blob implements Compat<Bytes> {\n  constructor(readonly _delegate: Bytes) {}\n  static fromBase64String(base64: string): Blob {\n    assertBase64Available();\n    return new Blob(Bytes.fromBase64String(base64));\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    assertUint8ArrayAvailable();\n    return new Blob(Bytes.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    assertBase64Available();\n    return this._delegate.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    assertUint8ArrayAvailable();\n    return this._delegate.toUint8Array();\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirestoreError } from '@firebase/firestore';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirestoreError) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport function isPartialObserver<T>(obj: unknown): obj is PartialObserver<T> {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as Record<string, unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport {\n  LoadBundleTask,\n  Bytes,\n  clearIndexedDbPersistence,\n  disableNetwork,\n  enableIndexedDbPersistence,\n  enableMultiTabIndexedDbPersistence,\n  enableNetwork,\n  ensureFirestoreConfigured,\n  Firestore as ExpFirestore,\n  connectFirestoreEmulator,\n  waitForPendingWrites,\n  FieldPath as ExpFieldPath,\n  limit,\n  limitToLast,\n  where,\n  orderBy,\n  startAfter,\n  startAt,\n  query,\n  endBefore,\n  endAt,\n  doc,\n  collection,\n  collectionGroup,\n  queryEqual,\n  Query as ExpQuery,\n  CollectionReference as ExpCollectionReference,\n  DocumentReference as ExpDocumentReference,\n  refEqual,\n  addDoc,\n  deleteDoc,\n  executeWrite,\n  getDoc,\n  getDocFromCache,\n  getDocFromServer,\n  getDocs,\n  getDocsFromCache,\n  getDocsFromServer,\n  onSnapshot,\n  onSnapshotsInSync,\n  setDoc,\n  updateDoc,\n  Unsubscribe,\n  DocumentChange as ExpDocumentChange,\n  DocumentSnapshot as ExpDocumentSnapshot,\n  QueryDocumentSnapshot as ExpQueryDocumentSnapshot,\n  QuerySnapshot as ExpQuerySnapshot,\n  snapshotEqual,\n  SnapshotMetadata,\n  runTransaction,\n  Transaction as ExpTransaction,\n  WriteBatch as ExpWriteBatch,\n  AbstractUserDataWriter,\n  FirestoreError,\n  FirestoreDataConverter as ModularFirestoreDataConverter,\n  setLogLevel as setClientLogLevel,\n  _DatabaseId,\n  _validateIsNotUsedTogether,\n  _cast,\n  _DocumentKey,\n  _debugAssert,\n  _FieldPath,\n  _ResourcePath,\n  _ByteString,\n  _logWarn,\n  namedQuery,\n  loadBundle,\n  PartialWithFieldValue,\n  WithFieldValue\n} from '@firebase/firestore';\nimport {\n  CollectionReference as PublicCollectionReference,\n  DocumentChange as PublicDocumentChange,\n  DocumentChangeType as PublicDocumentChangeType,\n  DocumentData,\n  DocumentData as PublicDocumentData,\n  DocumentReference as PublicDocumentReference,\n  DocumentSnapshot as PublicDocumentSnapshot,\n  FieldPath as PublicFieldPath,\n  FirebaseFirestore as PublicFirestore,\n  FirestoreDataConverter as PublicFirestoreDataConverter,\n  GetOptions as PublicGetOptions,\n  LogLevel as PublicLogLevel,\n  OrderByDirection as PublicOrderByDirection,\n  PersistenceSettings as PublicPersistenceSettings,\n  Query as PublicQuery,\n  QueryDocumentSnapshot as PublicQueryDocumentSnapshot,\n  QuerySnapshot as PublicQuerySnapshot,\n  SetOptions as PublicSetOptions,\n  Settings as PublicSettings,\n  SnapshotListenOptions as PublicSnapshotListenOptions,\n  SnapshotOptions as PublicSnapshotOptions,\n  Transaction as PublicTransaction,\n  UpdateData as PublicUpdateData,\n  WhereFilterOp as PublicWhereFilterOp,\n  WriteBatch as PublicWriteBatch\n} from '@firebase/firestore-types';\nimport {\n  Compat,\n  EmulatorMockTokenOptions,\n  getModularInstance\n} from '@firebase/util';\n\nimport { validateSetOptions } from '../util/input_validation';\n\nimport { Blob } from './blob';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver\n} from './observer';\n\n/**\n * A persistence provider for either memory-only or IndexedDB persistence.\n * Mainly used to allow optional inclusion of IndexedDB code.\n */\nexport interface PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: Firestore,\n    forceOwnership: boolean\n  ): Promise<void>;\n  enableMultiTabIndexedDbPersistence(firestore: Firestore): Promise<void>;\n  clearIndexedDbPersistence(firestore: Firestore): Promise<void>;\n}\n\n/**\n * The persistence provider included with the full Firestore SDK.\n */\nexport class IndexedDbPersistenceProvider implements PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: Firestore,\n    forceOwnership: boolean\n  ): Promise<void> {\n    return enableIndexedDbPersistence(firestore._delegate, { forceOwnership });\n  }\n  enableMultiTabIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    return enableMultiTabIndexedDbPersistence(firestore._delegate);\n  }\n  clearIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    return clearIndexedDbPersistence(firestore._delegate);\n  }\n}\n\n/**\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\n * to the functional API of firestore-exp.\n */\nexport class Firestore\n  implements PublicFirestore, FirebaseService, Compat<ExpFirestore>\n{\n  _appCompat?: FirebaseApp;\n  constructor(\n    databaseIdOrApp: _DatabaseId | FirebaseApp,\n    readonly _delegate: ExpFirestore,\n    private _persistenceProvider: PersistenceProvider\n  ) {\n    if (!(databaseIdOrApp instanceof _DatabaseId)) {\n      this._appCompat = databaseIdOrApp as FirebaseApp;\n    }\n  }\n\n  get _databaseId(): _DatabaseId {\n    return this._delegate._databaseId;\n  }\n\n  settings(settingsLiteral: PublicSettings): void {\n    const currentSettings = this._delegate._getSettings();\n    if (\n      !settingsLiteral.merge &&\n      currentSettings.host !== settingsLiteral.host\n    ) {\n      _logWarn(\n        'You are overriding the original host. If you did not intend ' +\n          'to override your settings, use {merge: true}.'\n      );\n    }\n\n    if (settingsLiteral.merge) {\n      settingsLiteral = {\n        ...currentSettings,\n        ...settingsLiteral\n      };\n      // Remove the property from the settings once the merge is completed\n      delete settingsLiteral.merge;\n    }\n\n    this._delegate._setSettings(settingsLiteral);\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectFirestoreEmulator(this._delegate, host, port, options);\n  }\n\n  enableNetwork(): Promise<void> {\n    return enableNetwork(this._delegate);\n  }\n\n  disableNetwork(): Promise<void> {\n    return disableNetwork(this._delegate);\n  }\n\n  enablePersistence(settings?: PublicPersistenceSettings): Promise<void> {\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n\n      _validateIsNotUsedTogether(\n        'synchronizeTabs',\n        synchronizeTabs,\n        'experimentalForceOwningTab',\n        experimentalForceOwningTab\n      );\n    }\n\n    return synchronizeTabs\n      ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)\n      : this._persistenceProvider.enableIndexedDbPersistence(\n          this,\n          experimentalForceOwningTab\n        );\n  }\n\n  clearPersistence(): Promise<void> {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  }\n\n  terminate(): Promise<void> {\n    if (this._appCompat) {\n      (this._appCompat as _FirebaseApp)._removeServiceInstance(\n        'firestore-compat'\n      );\n      (this._appCompat as _FirebaseApp)._removeServiceInstance('firestore');\n    }\n    return this._delegate._delete();\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    return waitForPendingWrites(this._delegate);\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    return onSnapshotsInSync(this._delegate, arg as PartialObserver<void>);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._appCompat) {\n      throw new FirestoreError(\n        'failed-precondition',\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._appCompat as FirebaseApp;\n  }\n\n  INTERNAL = {\n    delete: () => this.terminate()\n  };\n\n  collection(pathString: string): PublicCollectionReference {\n    try {\n      return new CollectionReference(\n        this,\n        collection(this._delegate, pathString)\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\n    }\n  }\n\n  doc(pathString: string): PublicDocumentReference {\n    try {\n      return new DocumentReference(this, doc(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\n    }\n  }\n\n  collectionGroup(collectionId: string): PublicQuery {\n    try {\n      return new Query(this, collectionGroup(this._delegate, collectionId));\n    } catch (e) {\n      throw replaceFunctionName(\n        e,\n        'collectionGroup()',\n        'Firestore.collectionGroup()'\n      );\n    }\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: PublicTransaction) => Promise<T>\n  ): Promise<T> {\n    return runTransaction(this._delegate, transaction =>\n      updateFunction(new Transaction(this, transaction))\n    );\n  }\n\n  batch(): PublicWriteBatch {\n    ensureFirestoreConfigured(this._delegate);\n    return new WriteBatch(\n      new ExpWriteBatch(this._delegate, mutations =>\n        executeWrite(this._delegate, mutations)\n      )\n    );\n  }\n\n  loadBundle(\n    bundleData: ArrayBuffer | ReadableStream<Uint8Array> | string\n  ): LoadBundleTask {\n    return loadBundle(this._delegate, bundleData);\n  }\n\n  namedQuery(name: string): Promise<PublicQuery<DocumentData> | null> {\n    return namedQuery(this._delegate, name).then(expQuery => {\n      if (!expQuery) {\n        return null;\n      }\n      return new Query(\n        this,\n        // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\n        // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\n        expQuery\n      );\n    });\n  }\n}\n\nexport class UserDataWriter extends AbstractUserDataWriter {\n  constructor(protected firestore: Firestore) {\n    super();\n  }\n\n  protected convertBytes(bytes: _ByteString): Blob {\n    return new Blob(new Bytes(bytes));\n  }\n\n  protected convertReference(name: string): DocumentReference {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return DocumentReference.forKey(key, this.firestore, /* converter= */ null);\n  }\n}\n\nexport function setLogLevel(level: PublicLogLevel): void {\n  setClientLogLevel(level);\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements PublicTransaction, Compat<ExpTransaction> {\n  private _userDataWriter: UserDataWriter;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpTransaction\n  ) {\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n\n  get<T>(\n    documentRef: PublicDocumentReference<T>\n  ): Promise<PublicDocumentSnapshot<T>> {\n    const ref = castReference(documentRef);\n    return this._delegate\n      .get(ref)\n      .then(\n        result =>\n          new DocumentSnapshot(\n            this._firestore,\n            new ExpDocumentSnapshot<T>(\n              this._firestore._delegate,\n              this._userDataWriter,\n              result._key,\n              result._document,\n              result.metadata,\n              ref.converter\n            )\n          )\n      );\n  }\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: PublicSetOptions\n  ): Transaction;\n  set<T>(documentRef: DocumentReference<T>, data: T): Transaction;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    data: T | Partial<T>,\n    options?: PublicSetOptions\n  ): Transaction {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('Transaction.set', options);\n      this._delegate.set(ref, data as PartialWithFieldValue<T>, options);\n    } else {\n      this._delegate.set(ref, data as WithFieldValue<T>);\n    }\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    data: PublicUpdateData\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    dataOrField: unknown,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField as PublicUpdateData);\n    } else {\n      this._delegate.update(\n        ref,\n        dataOrField as string | ExpFieldPath,\n        value,\n        ...moreFieldsAndValues\n      );\n    }\n\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): Transaction {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n}\n\nexport class WriteBatch implements PublicWriteBatch, Compat<ExpWriteBatch> {\n  constructor(readonly _delegate: ExpWriteBatch) {}\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: PublicSetOptions\n  ): WriteBatch;\n  set<T>(documentRef: DocumentReference<T>, data: T): WriteBatch;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    data: T | Partial<T>,\n    options?: PublicSetOptions\n  ): WriteBatch {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('WriteBatch.set', options);\n      this._delegate.set(ref, data as PartialWithFieldValue<T>, options);\n    } else {\n      this._delegate.set(ref, data as WithFieldValue<T>);\n    }\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    data: PublicUpdateData\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    dataOrField: string | PublicFieldPath | PublicUpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField as PublicUpdateData);\n    } else {\n      this._delegate.update(\n        ref,\n        dataOrField as string | ExpFieldPath,\n        value,\n        ...moreFieldsAndValues\n      );\n    }\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): WriteBatch {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n\n  commit(): Promise<void> {\n    return this._delegate.commit();\n  }\n}\n\n/**\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\n * experimental SDK into corresponding types from the Classic SDK before passing\n * them to the wrapped converter.\n */\nclass FirestoreDataConverter<U>\n  implements\n    ModularFirestoreDataConverter<U>,\n    Compat<PublicFirestoreDataConverter<U>>\n{\n  private static readonly INSTANCES = new WeakMap();\n\n  private constructor(\n    private readonly _firestore: Firestore,\n    private readonly _userDataWriter: UserDataWriter,\n    readonly _delegate: PublicFirestoreDataConverter<U>\n  ) {}\n\n  fromFirestore(\n    snapshot: ExpQueryDocumentSnapshot,\n    options?: PublicSnapshotOptions\n  ): U {\n    const expSnapshot = new ExpQueryDocumentSnapshot(\n      this._firestore._delegate,\n      this._userDataWriter,\n      snapshot._key,\n      snapshot._document,\n      snapshot.metadata,\n      /* converter= */ null\n    );\n    return this._delegate.fromFirestore(\n      new QueryDocumentSnapshot(this._firestore, expSnapshot),\n      options ?? {}\n    );\n  }\n\n  toFirestore(modelObject: WithFieldValue<U>): PublicDocumentData;\n  toFirestore(\n    modelObject: PartialWithFieldValue<U>,\n    options: PublicSetOptions\n  ): PublicDocumentData;\n  toFirestore(\n    modelObject: WithFieldValue<U> | PartialWithFieldValue<U>,\n    options?: PublicSetOptions\n  ): PublicDocumentData {\n    if (!options) {\n      return this._delegate.toFirestore(modelObject as U);\n    } else {\n      return this._delegate.toFirestore(modelObject as Partial<U>, options);\n    }\n  }\n\n  // Use the same instance of `FirestoreDataConverter` for the given instances\n  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n  // compare equal for two objects created with the same converter instance.\n  static getInstance<U>(\n    firestore: Firestore,\n    converter: PublicFirestoreDataConverter<U>\n  ): FirestoreDataConverter<U> {\n    const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n    let untypedConverterByConverter = converterMapByFirestore.get(firestore);\n    if (!untypedConverterByConverter) {\n      untypedConverterByConverter = new WeakMap();\n      converterMapByFirestore.set(firestore, untypedConverterByConverter);\n    }\n\n    let instance = untypedConverterByConverter.get(converter);\n    if (!instance) {\n      instance = new FirestoreDataConverter(\n        firestore,\n        new UserDataWriter(firestore),\n        converter\n      );\n      untypedConverterByConverter.set(converter, instance);\n    }\n\n    return instance;\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = PublicDocumentData>\n  implements PublicDocumentReference<T>, Compat<ExpDocumentReference<T>>\n{\n  private _userDataWriter: UserDataWriter;\n\n  constructor(\n    readonly firestore: Firestore,\n    readonly _delegate: ExpDocumentReference<T>\n  ) {\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  static forPath<U>(\n    path: _ResourcePath,\n    firestore: Firestore,\n    converter: ModularFirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        'invalid-argument',\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(\n      firestore,\n      new ExpDocumentReference(\n        firestore._delegate,\n        converter,\n        new _DocumentKey(path)\n      )\n    );\n  }\n\n  static forKey<U>(\n    key: _DocumentKey,\n    firestore: Firestore,\n    converter: ModularFirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    return new DocumentReference(\n      firestore,\n      new ExpDocumentReference(firestore._delegate, converter, key)\n    );\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get parent(): PublicCollectionReference<T> {\n    return new CollectionReference(this.firestore, this._delegate.parent);\n  }\n\n  get path(): string {\n    return this._delegate.path;\n  }\n\n  collection(\n    pathString: string\n  ): PublicCollectionReference<PublicDocumentData> {\n    try {\n      return new CollectionReference(\n        this.firestore,\n        collection(this._delegate, pathString)\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e,\n        'collection()',\n        'DocumentReference.collection()'\n      );\n    }\n  }\n\n  isEqual(other: PublicDocumentReference<T>): boolean {\n    other = getModularInstance<PublicDocumentReference<T>>(other);\n\n    if (!(other instanceof ExpDocumentReference)) {\n      return false;\n    }\n    return refEqual(this._delegate, other);\n  }\n\n  set(value: Partial<T>, options: PublicSetOptions): Promise<void>;\n  set(value: T): Promise<void>;\n  set(value: T | Partial<T>, options?: PublicSetOptions): Promise<void> {\n    options = validateSetOptions('DocumentReference.set', options);\n    try {\n      if (options) {\n        return setDoc(\n          this._delegate,\n          value as PartialWithFieldValue<T>,\n          options\n        );\n      } else {\n        return setDoc(this._delegate, value as WithFieldValue<T>);\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\n    }\n  }\n\n  update(value: PublicUpdateData): Promise<void>;\n  update(\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | PublicFieldPath | PublicUpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    try {\n      if (arguments.length === 1) {\n        return updateDoc(this._delegate, fieldOrUpdateData as PublicUpdateData);\n      } else {\n        return updateDoc(\n          this._delegate,\n          fieldOrUpdateData as string | ExpFieldPath,\n          value,\n          ...moreFieldsAndValues\n        );\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\n    }\n  }\n\n  delete(): Promise<void> {\n    return deleteDoc(this._delegate);\n  }\n\n  onSnapshot(observer: PartialObserver<PublicDocumentSnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    observer: PartialObserver<PublicDocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver<DocumentSnapshot<T>, ExpDocumentSnapshot<T>>(\n      args,\n      result =>\n        new DocumentSnapshot(\n          this.firestore,\n          new ExpDocumentSnapshot(\n            this.firestore._delegate,\n            this._userDataWriter,\n            result._key,\n            result._document,\n            result.metadata,\n            this._delegate.converter\n          )\n        )\n    );\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  get(options?: PublicGetOptions): Promise<PublicDocumentSnapshot<T>> {\n    let snap: Promise<ExpDocumentSnapshot<T>>;\n    if (options?.source === 'cache') {\n      snap = getDocFromCache(this._delegate);\n    } else if (options?.source === 'server') {\n      snap = getDocFromServer(this._delegate);\n    } else {\n      snap = getDoc(this._delegate);\n    }\n\n    return snap.then(\n      result =>\n        new DocumentSnapshot(\n          this.firestore,\n          new ExpDocumentSnapshot(\n            this.firestore._delegate,\n            this._userDataWriter,\n            result._key,\n            result._document,\n            result.metadata,\n            this._delegate.converter\n          )\n        )\n    );\n  }\n\n  withConverter(converter: null): PublicDocumentReference<PublicDocumentData>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U>\n  ): PublicDocumentReference<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): PublicDocumentReference<U> {\n    return new DocumentReference<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpDocumentReference<U>)\n    );\n  }\n}\n\n/**\n * Replaces the function name in an error thrown by the firestore-exp API\n * with the function names used in the classic API.\n */\nfunction replaceFunctionName(\n  e: Error,\n  original: string | RegExp,\n  updated: string\n): Error {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n\n/**\n * Iterates the list of arguments from an `onSnapshot` call and returns the\n * first argument that may be an `SnapshotListenOptions` object. Returns an\n * empty object if none is found.\n */\nexport function extractSnapshotOptions(\n  args: unknown[]\n): PublicSnapshotListenOptions {\n  for (const arg of args) {\n    if (typeof arg === 'object' && !isPartialObserver(arg)) {\n      return arg as PublicSnapshotListenOptions;\n    }\n  }\n  return {};\n}\n\n/**\n * Creates an observer that can be passed to the firestore-exp SDK. The\n * observer converts all observed values into the format expected by the classic\n * SDK.\n *\n * @param args - The list of arguments from an `onSnapshot` call.\n * @param wrapper - The function that converts the firestore-exp type into the\n * type used by this shim.\n */\nexport function wrapObserver<CompatType, ExpType>(\n  args: unknown[],\n  wrapper: (val: ExpType) => CompatType\n): PartialObserver<ExpType> {\n  let userObserver: PartialObserver<CompatType>;\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0] as PartialObserver<CompatType>;\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0] as NextFn<CompatType> | undefined,\n      error: args[1] as ErrorFn | undefined,\n      complete: args[2] as CompleteFn | undefined\n    };\n  } else {\n    userObserver = {\n      next: args[1] as NextFn<CompatType> | undefined,\n      error: args[2] as ErrorFn | undefined,\n      complete: args[3] as CompleteFn | undefined\n    };\n  }\n\n  return {\n    next: val => {\n      if (userObserver!.next) {\n        userObserver!.next(wrapper(val));\n      }\n    },\n    error: userObserver.error?.bind(userObserver),\n    complete: userObserver.complete?.bind(userObserver)\n  };\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends PublicSnapshotOptions {}\n\nexport class DocumentSnapshot<T = PublicDocumentData>\n  implements PublicDocumentSnapshot<T>, Compat<ExpDocumentSnapshot<T>>\n{\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpDocumentSnapshot<T>\n  ) {}\n\n  get ref(): DocumentReference<T> {\n    return new DocumentReference<T>(this._firestore, this._delegate.ref);\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._delegate.metadata;\n  }\n\n  get exists(): boolean {\n    return this._delegate.exists();\n  }\n\n  data(options?: PublicSnapshotOptions): T | undefined {\n    return this._delegate.data(options);\n  }\n\n  get(\n    fieldPath: string | PublicFieldPath,\n    options?: PublicSnapshotOptions\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any {\n    return this._delegate.get(fieldPath as string | ExpFieldPath, options);\n  }\n\n  isEqual(other: DocumentSnapshot<T>): boolean {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\n\nexport class QueryDocumentSnapshot<T = PublicDocumentData>\n  extends DocumentSnapshot<T>\n  implements PublicQueryDocumentSnapshot<T>\n{\n  data(options?: PublicSnapshotOptions): T {\n    const data = this._delegate.data(options);\n    _debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport class Query<T = PublicDocumentData>\n  implements PublicQuery<T>, Compat<ExpQuery<T>>\n{\n  private readonly _userDataWriter: UserDataWriter;\n\n  constructor(readonly firestore: Firestore, readonly _delegate: ExpQuery<T>) {\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  where(\n    fieldPath: string | _FieldPath,\n    opStr: PublicWhereFilterOp,\n    value: unknown\n  ): Query<T> {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `where` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, where(fieldPath as string, opStr, value))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  orderBy(\n    fieldPath: string | _FieldPath,\n    directionStr?: PublicOrderByDirection\n  ): Query<T> {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, orderBy(fieldPath as string, directionStr))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  limit(n: number): Query<T> {\n    try {\n      return new Query<T>(this.firestore, query(this._delegate, limit(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limit()', 'Query.limit()');\n    }\n  }\n\n  limitToLast(n: number): Query<T> {\n    try {\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, limitToLast(n))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\n    }\n  }\n\n  startAt(...args: any[]): Query<T> {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\n    }\n  }\n\n  startAfter(...args: any[]): Query<T> {\n    try {\n      return new Query(\n        this.firestore,\n        query(this._delegate, startAfter(...args))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\n    }\n  }\n\n  endBefore(...args: any[]): Query<T> {\n    try {\n      return new Query(\n        this.firestore,\n        query(this._delegate, endBefore(...args))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\n    }\n  }\n\n  endAt(...args: any[]): Query<T> {\n    try {\n      return new Query(this.firestore, query(this._delegate, endAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\n    }\n  }\n\n  isEqual(other: PublicQuery<T>): boolean {\n    return queryEqual(this._delegate, (other as Query<T>)._delegate);\n  }\n\n  get(options?: PublicGetOptions): Promise<QuerySnapshot<T>> {\n    let query: Promise<ExpQuerySnapshot<T>>;\n    if (options?.source === 'cache') {\n      query = getDocsFromCache(this._delegate);\n    } else if (options?.source === 'server') {\n      query = getDocsFromServer(this._delegate);\n    } else {\n      query = getDocs(this._delegate);\n    }\n    return query.then(\n      result =>\n        new QuerySnapshot(\n          this.firestore,\n          new ExpQuerySnapshot<T>(\n            this.firestore._delegate,\n            this._userDataWriter,\n            this._delegate,\n            result._snapshot\n          )\n        )\n    );\n  }\n\n  onSnapshot(observer: PartialObserver<PublicQuerySnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    observer: PartialObserver<PublicQuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver<QuerySnapshot<T>, ExpQuerySnapshot<T>>(\n      args,\n      snap =>\n        new QuerySnapshot(\n          this.firestore,\n          new ExpQuerySnapshot<T>(\n            this.firestore._delegate,\n            this._userDataWriter,\n            this._delegate,\n            snap._snapshot\n          )\n        )\n    );\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  withConverter(converter: null): Query<PublicDocumentData>;\n  withConverter<U>(converter: PublicFirestoreDataConverter<U>): Query<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): Query<U> {\n    return new Query<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpQuery<U>)\n    );\n  }\n}\n\nexport class DocumentChange<T = PublicDocumentData>\n  implements PublicDocumentChange<T>, Compat<ExpDocumentChange<T>>\n{\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpDocumentChange<T>\n  ) {}\n\n  get type(): PublicDocumentChangeType {\n    return this._delegate.type;\n  }\n\n  get doc(): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot<T>(this._firestore, this._delegate.doc);\n  }\n\n  get oldIndex(): number {\n    return this._delegate.oldIndex;\n  }\n\n  get newIndex(): number {\n    return this._delegate.newIndex;\n  }\n}\n\nexport class QuerySnapshot<T = PublicDocumentData>\n  implements PublicQuerySnapshot<T>, Compat<ExpQuerySnapshot<T>>\n{\n  constructor(\n    readonly _firestore: Firestore,\n    readonly _delegate: ExpQuerySnapshot<T>\n  ) {}\n\n  get query(): Query<T> {\n    return new Query(this._firestore, this._delegate.query);\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._delegate.metadata;\n  }\n\n  get size(): number {\n    return this._delegate.size;\n  }\n\n  get empty(): boolean {\n    return this._delegate.empty;\n  }\n\n  get docs(): Array<QueryDocumentSnapshot<T>> {\n    return this._delegate.docs.map(\n      doc => new QueryDocumentSnapshot<T>(this._firestore, doc)\n    );\n  }\n\n  docChanges(\n    options?: PublicSnapshotListenOptions\n  ): Array<PublicDocumentChange<T>> {\n    return this._delegate\n      .docChanges(options)\n      .map(docChange => new DocumentChange<T>(this._firestore, docChange));\n  }\n\n  forEach(\n    callback: (result: QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    this._delegate.forEach(snapshot => {\n      callback.call(\n        thisArg,\n        new QueryDocumentSnapshot(this._firestore, snapshot)\n      );\n    });\n  }\n\n  isEqual(other: QuerySnapshot<T>): boolean {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\n\nexport class CollectionReference<T = PublicDocumentData>\n  extends Query<T>\n  implements PublicCollectionReference<T>\n{\n  constructor(\n    readonly firestore: Firestore,\n    readonly _delegate: ExpCollectionReference<T>\n  ) {\n    super(firestore, _delegate);\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get path(): string {\n    return this._delegate.path;\n  }\n\n  get parent(): DocumentReference<PublicDocumentData> | null {\n    const docRef = this._delegate.parent;\n    return docRef ? new DocumentReference(this.firestore, docRef) : null;\n  }\n\n  doc(documentPath?: string): DocumentReference<T> {\n    try {\n      if (documentPath === undefined) {\n        // Call `doc` without `documentPath` if `documentPath` is `undefined`\n        // as `doc` validates the number of arguments to prevent users from\n        // accidentally passing `undefined`.\n        return new DocumentReference(this.firestore, doc(this._delegate));\n      } else {\n        return new DocumentReference(\n          this.firestore,\n          doc(this._delegate, documentPath)\n        );\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\n    }\n  }\n\n  add(data: T): Promise<DocumentReference<T>> {\n    return addDoc(this._delegate, data as WithFieldValue<T>).then(\n      docRef => new DocumentReference(this.firestore, docRef)\n    );\n  }\n\n  isEqual(other: CollectionReference<T>): boolean {\n    return refEqual(this._delegate, other._delegate);\n  }\n\n  withConverter(converter: null): CollectionReference<PublicDocumentData>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U>\n  ): CollectionReference<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): CollectionReference<U> {\n    return new CollectionReference<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpCollectionReference<U>)\n    );\n  }\n}\n\nfunction castReference<T>(\n  documentRef: PublicDocumentReference<T>\n): ExpDocumentReference<T> {\n  return _cast<ExpDocumentReference<T>>(documentRef, ExpDocumentReference);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FieldPath as ExpFieldPath,\n  _FieldPath as InternalFieldPath\n} from '@firebase/firestore';\nimport { FieldPath as PublicFieldPath } from '@firebase/firestore-types';\nimport { Compat, getModularInstance } from '@firebase/util';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a list\n * of field names (referring to a nested field in the document).\n */\nexport class FieldPath implements PublicFieldPath, Compat<ExpFieldPath> {\n  readonly _delegate: ExpFieldPath;\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    this._delegate = new ExpFieldPath(...fieldNames);\n  }\n\n  static documentId(): FieldPath {\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    return new FieldPath(InternalFieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other: PublicFieldPath): boolean {\n    other = getModularInstance(other);\n\n    if (!(other instanceof ExpFieldPath)) {\n      return false;\n    }\n    return this._delegate._internalPath.isEqual(other._internalPath);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  arrayRemove,\n  arrayUnion,\n  deleteField,\n  FieldValue as FieldValue1,\n  increment,\n  serverTimestamp\n} from '@firebase/firestore';\nimport { FieldValue as PublicFieldValue } from '@firebase/firestore-types';\nimport { Compat } from '@firebase/util';\n\nexport class FieldValue implements PublicFieldValue, Compat<FieldValue1> {\n  static serverTimestamp(): FieldValue {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n\n  static delete(): FieldValue {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n\n  static arrayUnion(...elements: unknown[]): FieldValue {\n    const delegate = arrayUnion(...elements);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n\n  static arrayRemove(...elements: unknown[]): FieldValue {\n    const delegate = arrayRemove(...elements);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n\n  static increment(n: number): FieldValue {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n\n  constructor(readonly _delegate: FieldValue1) {}\n\n  isEqual(other: FieldValue): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp } from '@firebase/app-compat';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport {\n  Firestore as ModularFirestore,\n  CACHE_SIZE_UNLIMITED,\n  GeoPoint,\n  Timestamp\n} from '@firebase/firestore';\n\nimport { Blob } from './api/blob';\nimport {\n  Firestore,\n  Transaction,\n  CollectionReference,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  WriteBatch,\n  setLogLevel\n} from './api/database';\nimport { FieldPath } from './api/field_path';\nimport { FieldValue } from './api/field_value';\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\n *\n * @param firebase - The FirebaseNamespace to register Firestore with\n * @param firestoreFactory - A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    firestoreExp: ModularFirestore\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore-compat',\n      container => {\n        const app = container.getProvider('app-compat').getImmediate()!;\n        const firestoreExp = container.getProvider('firestore').getImmediate()!;\n        return firestoreFactory(app, firestoreExp);\n      },\n      'PUBLIC' as ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport type { FirebaseNamespace } from '@firebase/app-types';\nimport * as types from '@firebase/firestore-types';\n\nimport { name, version } from '../package.json';\n\nimport { Firestore, IndexedDbPersistenceProvider } from './api/database';\nimport { configureForFirebase } from './config';\n\nimport './register-module';\n\n/**\n * Registers the main Firestore build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, firestoreExp) =>\n      new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider())\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase as unknown as FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    firestore: {\n      (app?: FirebaseApp): types.FirebaseFirestore;\n      Blob: typeof types.Blob;\n      CollectionReference: typeof types.CollectionReference;\n      DocumentReference: typeof types.DocumentReference;\n      DocumentSnapshot: typeof types.DocumentSnapshot;\n      FieldPath: typeof types.FieldPath;\n      FieldValue: typeof types.FieldValue;\n      Firestore: typeof types.FirebaseFirestore;\n      GeoPoint: typeof types.GeoPoint;\n      Query: typeof types.Query;\n      QueryDocumentSnapshot: typeof types.QueryDocumentSnapshot;\n      QuerySnapshot: typeof types.QuerySnapshot;\n      Timestamp: typeof types.Timestamp;\n      Transaction: typeof types.Transaction;\n      WriteBatch: typeof types.WriteBatch;\n      setLogLevel: typeof types.setLogLevel;\n    };\n  }\n  interface FirebaseApp {\n    firestore?(): types.FirebaseFirestore;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\n/**\n * Takes data and encodes it in a JSON-friendly way, such that types such as\n * Date are preserved.\n * @internal\n * @param data - Data to encode.\n */\nexport function encode(data: unknown): unknown {\n  if (data == null) {\n    return null;\n  }\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n  if (data === true || data === false) {\n    return data;\n  }\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n  if (Array.isArray(data)) {\n    return data.map(x => encode(x));\n  }\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data!, x => encode(x));\n  }\n  // If we got this far, the data is not encodable.\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n\n/**\n * Takes data that's been encoded in a JSON-friendly form and returns a form\n * with richer datatypes, such as Dates, etc.\n * @internal\n * @param json - JSON to convert.\n */\nexport function decode(json: unknown): unknown {\n  if (json == null) {\n    return json;\n  }\n  if ((json as { [key: string]: unknown })['@type']) {\n    switch ((json as { [key: string]: unknown })['@type']) {\n      case LONG_TYPE:\n      // Fall through and handle this the same as unsigned.\n      case UNSIGNED_LONG_TYPE: {\n        // Technically, this could work return a valid number for malformed\n        // data if there was a number followed by garbage. But it's just not\n        // worth all the extra code to detect that case.\n        const value = Number((json as { [key: string]: unknown })['value']);\n        if (isNaN(value)) {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n        return value;\n      }\n      default: {\n        throw new Error('Data cannot be decoded from JSON: ' + json);\n      }\n    }\n  }\n  if (Array.isArray(json)) {\n    return json.map(x => decode(x));\n  }\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json!, x => decode(x));\n  }\n  // Anything else is safe to return.\n  return json;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Functions.\n */\nexport const FUNCTIONS_TYPE = 'functions';\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FunctionsErrorCode } from './public-types';\nimport { decode } from './serializer';\nimport { HttpResponseBody } from './service';\nimport { FirebaseError } from '@firebase/util';\nimport { FUNCTIONS_TYPE } from './constants';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class FunctionsError extends FirebaseError {\n  constructor(\n    /**\n     * A standard error code that will be returned to the client. This also\n     * determines the HTTP status code of the response, as defined in code.proto.\n     */\n    code: FunctionsErrorCode,\n    message?: string,\n    /**\n     * Extra data to be converted to JSON and included in the error response.\n     */\n    readonly details?: unknown\n  ) {\n    super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new FunctionsError(code, description, details);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from '@firebase/component';\nimport {\n  AppCheckInternalComponentName,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport {\n  MessagingInternal,\n  MessagingInternalComponentName\n} from '@firebase/messaging-interop-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\n\n/**\n * The metadata that should be supplied with function calls.\n * @internal\n */\nexport interface Context {\n  authToken?: string;\n  messagingToken?: string;\n  appCheckToken: string | null;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n * @internal\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: MessagingInternal | null = null;\n  private appCheck: FirebaseAppCheckInternal | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<MessagingInternalComponentName>,\n    appCheckProvider: Provider<AppCheckInternalComponentName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.appCheck) {\n      appCheckProvider.get().then(\n        appCheck => (this.appCheck = appCheck),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      return token?.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getMessagingToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getAppCheckToken(): Promise<string | null> {\n    if (this.appCheck) {\n      const result = await this.appCheck.getToken();\n      if (result.error) {\n        // Do not send the App Check header to the functions endpoint if\n        // there was an error from the App Check exchange endpoint. The App\n        // Check SDK will already have logged the error to console.\n        return null;\n      }\n      return result.token;\n    }\n    return null;\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const messagingToken = await this.getMessagingToken();\n    const appCheckToken = await this.getAppCheckToken();\n    return { authToken, messagingToken, appCheckToken };\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport {\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from './public-types';\nimport { _errorForResponse, FunctionsError } from './error';\nimport { ContextProvider } from './context';\nimport { encode, decode } from './serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { MessagingInternalComponentName } from '@firebase/messaging-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n\nexport const DEFAULT_REGION = 'us-central1';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\ninterface CancellablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type FunctionsError.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(millis: number): CancellablePromise<never> {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timer: any | null = null;\n  return {\n    promise: new Promise((_, reject) => {\n      timer = setTimeout(() => {\n        reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n      }, millis);\n    }),\n    cancel: () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    }\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n * @internal\n */\nexport class FunctionsService implements _FirebaseService {\n  readonly contextProvider: ContextProvider;\n  emulatorOrigin: string | null = null;\n  cancelAllRequests: Promise<void>;\n  deleteService!: () => Promise<void>;\n  region: string;\n  customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app.\n   * @param app - The FirebaseApp to use.\n   */\n  constructor(\n    readonly app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<MessagingInternalComponentName>,\n    appCheckProvider: Provider<AppCheckInternalComponentName>,\n    regionOrCustomDomain: string = DEFAULT_REGION,\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(\n      authProvider,\n      messagingProvider,\n      appCheckProvider\n    );\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return Promise.resolve(resolve());\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n\n  _delete(): Promise<void> {\n    return this.deleteService();\n  }\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name - The name of the callable.\n   * @internal\n   */\n  _url(name: string): string {\n    const projectId = this.app.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n}\n\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host The emulator host (ex: localhost)\n * @param port The emulator port (ex: 5001)\n * @public\n */\nexport function connectFunctionsEmulator(\n  functionsInstance: FunctionsService,\n  host: string,\n  port: number\n): void {\n  functionsInstance.emulatorOrigin = `http://${host}:${port}`;\n}\n\n/**\n * Returns a reference to the callable https trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nexport function httpsCallable<RequestData, ResponseData>(\n  functionsInstance: FunctionsService,\n  name: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return (data => {\n    return call(functionsInstance, name, data, options || {});\n  }) as HttpsCallable<RequestData, ResponseData>;\n}\n\n/**\n * Does an HTTP POST and returns the completed response.\n * @param url The url to post to.\n * @param body The JSON body of the post.\n * @param headers The HTTP headers to include in the request.\n * @return A Promise that will succeed when the request finishes.\n */\nasync function postJSON(\n  url: string,\n  body: unknown,\n  headers: { [key: string]: string },\n  fetchImpl: typeof fetch\n): Promise<HttpResponse> {\n  headers['Content-Type'] = 'application/json';\n\n  let response: Response;\n  try {\n    response = await fetchImpl(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    });\n  } catch (e) {\n    // This could be an unhandled error on the backend, or it could be a\n    // network error. There's no way to know, since an unhandled error on the\n    // backend will fail to set the proper CORS header, and thus will be\n    // treated as a network error by fetch.\n    return {\n      status: 0,\n      json: null\n    };\n  }\n  let json: HttpResponseBody | null = null;\n  try {\n    json = await response.json();\n  } catch (e) {\n    // If we fail to parse JSON, it will fail the same as an empty body.\n  }\n  return {\n    status: response.status,\n    json\n  };\n}\n\n/**\n * Calls a callable function asynchronously and returns the result.\n * @param name The name of the callable trigger.\n * @param data The data to pass as params to the function.s\n */\nasync function call(\n  functionsInstance: FunctionsService,\n  name: string,\n  data: unknown,\n  options: HttpsCallableOptions\n): Promise<HttpsCallableResult> {\n  const url = functionsInstance._url(name);\n\n  // Encode any special types, such as dates, in the input data.\n  data = encode(data);\n  const body = { data };\n\n  // Add a header for the authToken.\n  const headers: { [key: string]: string } = {};\n  const context = await functionsInstance.contextProvider.getContext();\n  if (context.authToken) {\n    headers['Authorization'] = 'Bearer ' + context.authToken;\n  }\n  if (context.messagingToken) {\n    headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n  }\n  if (context.appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = context.appCheckToken;\n  }\n\n  // Default timeout to 70s, but let the options override it.\n  const timeout = options.timeout || 70000;\n\n  const failAfterHandle = failAfter(timeout);\n  const response = await Promise.race([\n    postJSON(url, body, headers, functionsInstance.fetchImpl),\n    failAfterHandle.promise,\n    functionsInstance.cancelAllRequests\n  ]);\n\n  // Always clear the failAfter timeout\n  failAfterHandle.cancel();\n\n  // If service was deleted, interrupted response throws an error.\n  if (!response) {\n    throw new FunctionsError(\n      'cancelled',\n      'Firebase Functions instance was deleted.'\n    );\n  }\n\n  // Check for an error status, regardless of http status.\n  const error = _errorForResponse(response.status, response.json);\n  if (error) {\n    throw error;\n  }\n\n  if (!response.json) {\n    throw new FunctionsError('internal', 'Response is not valid JSON object.');\n  }\n\n  let responseData = response.json.data;\n  // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n  // backwards compatibility.\n  if (typeof responseData === 'undefined') {\n    responseData = response.json.result;\n  }\n  if (typeof responseData === 'undefined') {\n    // Consider the response malformed.\n    throw new FunctionsError('internal', 'Response is missing data field.');\n  }\n\n  // Decode any special types, such as dates, in the returned data.\n  const decodedData = decode(responseData);\n\n  return { data: decodedData };\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { FunctionsService } from './service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactory\n} from '@firebase/component';\nimport { FUNCTIONS_TYPE } from './constants';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { MessagingInternalComponentName } from '@firebase/messaging-interop-types';\nimport { name, version } from '../package.json';\n\nconst AUTH_INTERNAL_NAME: FirebaseAuthInternalName = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME: AppCheckInternalComponentName =\n  'app-check-internal';\nconst MESSAGING_INTERNAL_NAME: MessagingInternalComponentName =\n  'messaging-internal';\n\nexport function registerFunctions(\n  fetchImpl: typeof fetch,\n  variant?: string\n): void {\n  const factory: InstanceFactory<'functions'> = (\n    container: ComponentContainer,\n    { instanceIdentifier: regionOrCustomDomain }\n  ) => {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new FunctionsService(\n      app,\n      authProvider,\n      messagingProvider,\n      appCheckProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  };\n\n  _registerComponent(\n    new Component(\n      FUNCTIONS_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport { FUNCTIONS_TYPE } from './constants';\n\nimport { Provider } from '@firebase/component';\nimport { Functions, HttpsCallableOptions, HttpsCallable } from './public-types';\nimport {\n  FunctionsService,\n  DEFAULT_REGION,\n  connectFunctionsEmulator as _connectFunctionsEmulator,\n  httpsCallable as _httpsCallable\n} from './service';\nimport { getModularInstance } from '@firebase/util';\n\nexport * from './public-types';\n\n/**\n * Returns a {@link Functions} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param regionOrCustomDomain - one of:\n *   a) The region the callable functions are located in (ex: us-central1)\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\n * @public\n */\nexport function getFunctions(\n  app: FirebaseApp = getApp(),\n  regionOrCustomDomain: string = DEFAULT_REGION\n): Functions {\n  // Dependencies\n  const functionsProvider: Provider<'functions'> = _getProvider(\n    getModularInstance(app),\n    FUNCTIONS_TYPE\n  );\n  const functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  return functionsInstance;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @public\n */\nexport function connectFunctionsEmulator(\n  functionsInstance: Functions,\n  host: string,\n  port: number\n): void {\n  _connectFunctionsEmulator(\n    getModularInstance<FunctionsService>(functionsInstance as FunctionsService),\n    host,\n    port\n  );\n}\n\n/**\n * Returns a reference to the callable HTTPS trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nexport function httpsCallable<RequestData = unknown, ResponseData = unknown>(\n  functionsInstance: Functions,\n  name: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return _httpsCallable<RequestData, ResponseData>(\n    getModularInstance<FunctionsService>(functionsInstance as FunctionsService),\n    name,\n    options\n  );\n}\n", "/**\n * Cloud Functions for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerFunctions } from './config';\n\nexport * from './api';\n\nregisterFunctions(fetch.bind(self));\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseFunctions, HttpsCallable } from '@firebase/functions-types';\nimport {\n  httpsCallable as httpsCallableExp,\n  connectFunctionsEmulator as useFunctionsEmulatorExp,\n  HttpsCallableOptions,\n  Functions as FunctionsServiceExp\n} from '@firebase/functions';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport { FirebaseError } from '@firebase/util';\n\nexport class FunctionsService implements FirebaseFunctions, _FirebaseService {\n  /**\n   * For testing.\n   * @internal\n   */\n  _region: string;\n  /**\n   * For testing.\n   * @internal\n   */\n  _customDomain: string | null;\n\n  constructor(\n    public app: FirebaseApp,\n    readonly _delegate: FunctionsServiceExp\n  ) {\n    this._region = this._delegate.region;\n    this._customDomain = this._delegate.customDomain;\n  }\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return httpsCallableExp(this._delegate, name, options);\n  }\n  /**\n   * Deprecated in pre-modularized repo, does not exist in modularized\n   * functions package, need to convert to \"host\" and \"port\" args that\n   * `useFunctionsEmulatorExp` takes.\n   * @deprecated\n   */\n  useFunctionsEmulator(origin: string): void {\n    const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');\n    if (match == null) {\n      throw new FirebaseError(\n        'functions',\n        'No origin provided to useFunctionsEmulator()'\n      );\n    }\n    if (match[2] == null) {\n      throw new FirebaseError(\n        'functions',\n        'Port missing in origin provided to useFunctionsEmulator()'\n      );\n    }\n    return useFunctionsEmulatorExp(this._delegate, match[1], Number(match[2]));\n  }\n  useEmulator(host: string, port: number): void {\n    return useFunctionsEmulatorExp(this._delegate, host, port);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport { FunctionsService } from './service';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nconst DEFAULT_REGION = 'us-central1';\n\nconst factory: InstanceFactory<'functions-compat'> = (\n  container: ComponentContainer,\n  { instanceIdentifier: regionOrCustomDomain }: InstanceFactoryOptions\n) => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const functionsServiceExp = container.getProvider('functions').getImmediate({\n    identifier: regionOrCustomDomain ?? DEFAULT_REGION\n  });\n\n  return new FunctionsService(app, functionsServiceExp);\n};\n\nexport function registerFunctions(): void {\n  const namespaceExports = {\n    Functions: FunctionsService\n  };\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component('functions-compat', factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app-compat';\nimport { name, version } from '../package.json';\nimport { registerFunctions } from './register';\nimport * as types from '@firebase/functions-types';\n\nregisterFunctions();\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    functions: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions(regionOrCustomDomain?: string): types.FirebaseFunctions;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const TAG = 'FirebaseMessaging: ';\nexport const MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST = 1000;\nexport const MAX_RETRIES = 3;\nexport const LOG_INTERVAL_IN_MS = 86400000; //24 hour\nexport const DEFAULT_BACKOFF_TIME_MS = 5000;\n\n// FCM log source name registered at Firelog: 'FCM_CLIENT_EVENT_LOGGING'. It uniquely identifies\n// FCM's logging configuration.\nexport const FCM_LOG_SOURCE = 1249;\n\n// Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\nexport const SDK_PLATFORM_WEB = 3;\nexport const EVENT_MESSAGE_DELIVERED = 1;\n\nexport enum MessageType {\n  DATA_MESSAGE = 1,\n  DISPLAY_NOTIFICATION = 3\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  fcmMessageId: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (\n      indexedDB as {\n        databases(): Promise<Array<{ name: string; version: number }>>;\n      }\n    ).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from '../helpers/migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  INDEXED_DB_UNSUPPORTED = 'indexed-db-unsupported',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [ErrorCode.INDEXED_DB_UNSUPPORTED]:\n    \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from './idb-manager';\nimport {\n  requestDeleteToken,\n  requestGetToken,\n  requestUpdateToken\n} from './requests';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { MessagingService } from '../messaging-service';\n\n// UpdateRegistration will be called once every week.\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getTokenInternal(\n  messaging: MessagingService\n): Promise<string> {\n  const pushSubscription = await getPushSubscription(\n    messaging.swRegistration!,\n    messaging.vapidKey!\n  );\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey: messaging.vapidKey!,\n    swScope: messaging.swRegistration!.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(\n        messaging.firebaseDependencies!,\n        tokenDetails.token\n      );\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(messaging.firebaseDependencies!, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(messaging, {\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n    });\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteTokenInternal(\n  messaging: MessagingService\n): Promise<boolean> {\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(\n      messaging.firebaseDependencies,\n      tokenDetails.token\n    );\n    await dbRemove(messaging.firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription =\n    await messaging.swRegistration!.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  messaging: MessagingService,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      messaging.firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteTokenInternal(messaging);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '../interfaces/public-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_BACKOFF_TIME_MS,\n  EVENT_MESSAGE_DELIVERED,\n  FCM_LOG_SOURCE,\n  LOG_INTERVAL_IN_MS,\n  MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST,\n  MAX_RETRIES,\n  MessageType,\n  SDK_PLATFORM_WEB\n} from '../util/constants';\nimport {\n  FcmEvent,\n  LogEvent,\n  LogRequest,\n  LogResponse\n} from '../interfaces/logging-types';\n\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\nimport { MessagingService } from '../messaging-service';\n\nconst FIRELOG_ENDPOINT = _mergeStrings(\n  'hts/frbslgigp.ogepscmv/ieo/eaylg',\n  'tp:/ieaeogn-agolai.o/1frlglgc/o'\n);\n\nconst FCM_TRANSPORT_KEY = _mergeStrings(\n  'AzSCbw63g1R0nCw85jG8',\n  'Iaya3yLKwmgvh7cF0q4'\n);\n\nexport function startLoggingService(messaging: MessagingService): void {\n  if (!messaging.isLogServiceStarted) {\n    _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    messaging.isLogServiceStarted = true;\n  }\n}\n\n/**\n *\n * @param messaging the messaging instance.\n * @param offsetInMs this method execute after `offsetInMs` elapsed .\n */\nexport function _processQueue(\n  messaging: MessagingService,\n  offsetInMs: number\n): void {\n  setTimeout(async () => {\n    if (!messaging.deliveryMetricsExportedToBigQueryEnabled) {\n      // flush events and terminate logging service\n      messaging.logEvents = [];\n      messaging.isLogServiceStarted = false;\n\n      return;\n    }\n\n    if (!messaging.logEvents.length) {\n      return _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    }\n\n    await _dispatchLogEvents(messaging);\n  }, offsetInMs);\n}\n\nexport async function _dispatchLogEvents(\n  messaging: MessagingService\n): Promise<void> {\n  for (\n    let i = 0, n = messaging.logEvents.length;\n    i < n;\n    i += MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST\n  ) {\n    const logRequest = _createLogRequest(\n      messaging.logEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST)\n    );\n\n    let retryCount = 0,\n      response = {} as Response;\n\n    do {\n      try {\n        response = await fetch(\n          FIRELOG_ENDPOINT.concat('?key=', FCM_TRANSPORT_KEY),\n          {\n            method: 'POST',\n            body: JSON.stringify(logRequest)\n          }\n        );\n\n        // don't retry on 200s or non retriable errors\n        if (response.ok || (!response.ok && !isRetriableError(response))) {\n          break;\n        }\n\n        if (!response.ok && isRetriableError(response)) {\n          // rethrow to retry with quota\n          throw new Error(\n            'a retriable Non-200 code is returned in fetch to Firelog endpoint. Retry'\n          );\n        }\n      } catch (error) {\n        const isLastAttempt = retryCount === MAX_RETRIES;\n        if (isLastAttempt) {\n          // existing the do-while interactive retry logic because retry quota has reached.\n          break;\n        }\n      }\n\n      let delayInMs: number;\n      try {\n        delayInMs = Number(\n          ((await response.json()) as LogResponse).nextRequestWaitMillis\n        );\n      } catch (e) {\n        delayInMs = DEFAULT_BACKOFF_TIME_MS;\n      }\n\n      await new Promise(resolve => setTimeout(resolve, delayInMs));\n\n      retryCount++;\n    } while (retryCount < MAX_RETRIES);\n  }\n\n  messaging.logEvents = [];\n  // schedule for next logging\n  _processQueue(messaging, LOG_INTERVAL_IN_MS);\n}\n\nfunction isRetriableError(response: Response): boolean {\n  const httpStatus = response.status;\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\nexport async function stageLog(\n  messaging: MessagingService,\n  internalPayload: MessagePayloadInternal\n): Promise<void> {\n  const fcmEvent = createFcmEvent(\n    internalPayload,\n    await messaging.firebaseDependencies.installations.getId()\n  );\n\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\n\nfunction createFcmEvent(\n  internalPayload: MessagePayloadInternal,\n  fid: string\n): FcmEvent {\n  const fcmEvent = {} as FcmEvent;\n\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n  if (!!internalPayload.from) {\n    fcmEvent.project_number = internalPayload.from;\n  }\n\n  if (!!internalPayload.fcmMessageId) {\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n  }\n\n  fcmEvent.instance_id = fid;\n\n  if (!!internalPayload.notification) {\n    fcmEvent.message_type = MessageType.DISPLAY_NOTIFICATION.toString();\n  } else {\n    fcmEvent.message_type = MessageType.DATA_MESSAGE.toString();\n  }\n\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n\n  if (!!internalPayload.collapse_key) {\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n  }\n\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n\n  if (!!internalPayload.fcmOptions?.analytics_label) {\n    fcmEvent.analytics_label = internalPayload.fcmOptions?.analytics_label;\n  }\n\n  /* eslint-enable camelcase */\n  return fcmEvent;\n}\n\nfunction createAndEnqueueLogEvent(\n  messaging: MessagingService,\n  fcmEvent: FcmEvent\n): void {\n  const logEvent = {} as LogEvent;\n\n  /* eslint-disable camelcase */\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent);\n  // eslint-disable-next-line camelcase\n\n  messaging.logEvents.push(logEvent);\n}\n\nexport function _createLogRequest(logEventQueue: LogEvent[]): LogRequest {\n  const logRequest = {} as LogRequest;\n\n  /* eslint-disable camelcase */\n  logRequest.log_source = FCM_LOG_SOURCE.toString();\n  logRequest.log_event = logEventQueue;\n  /* eslint-enable camelcase */\n\n  return logRequest;\n}\n\nexport function _mergeStrings(s1: string, s2: string): string {\n  const resultArray = [];\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { MessagePayload, NextFn, Observer } from './interfaces/public-types';\n\nimport { FirebaseAnalyticsInternalName } from '@firebase/analytics-interop-types';\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { LogEvent } from './interfaces/logging-types';\nimport { Provider } from '@firebase/component';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { extractAppConfig } from './helpers/extract-app-config';\n\nexport class MessagingService implements _FirebaseService {\n  readonly app!: FirebaseApp;\n  readonly firebaseDependencies!: FirebaseInternalDependencies;\n\n  swRegistration?: ServiceWorkerRegistration;\n  vapidKey?: string;\n  // logging is only done with end user consent. Default to false.\n  deliveryMetricsExportedToBigQueryEnabled: boolean = false;\n\n  onBackgroundMessageHandler:\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload>\n    | null = null;\n\n  onMessageHandler: NextFn<MessagePayload> | Observer<MessagePayload> | null =\n    null;\n\n  logEvents: LogEvent[] = [];\n  isLogServiceStarted: boolean = false;\n\n  constructor(\n    app: FirebaseApp,\n    installations: _FirebaseInstallationsInternal,\n    analyticsProvider: Provider<FirebaseAnalyticsInternalName>\n  ) {\n    const appConfig = extractAppConfig(app);\n\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n\n  _delete(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_SW_PATH, DEFAULT_SW_SCOPE } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport { MessagingService } from '../messaging-service';\n\nexport async function registerDefaultSw(\n  messaging: MessagingService\n): Promise<void> {\n  try {\n    messaging.swRegistration = await navigator.serviceWorker.register(\n      DEFAULT_SW_PATH,\n      {\n        scope: DEFAULT_SW_SCOPE\n      }\n    );\n\n    // The timing when browser updates sw when sw has an update is unreliable from experiment. It\n    // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n    // is stuck with the old version. For example,\n    // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n    // sw if there was an update.\n    messaging.swRegistration.update().catch(() => {\n      /* it is non blocking and we don't care if it failed */\n    });\n  } catch (e) {\n    throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n      browserErrorMessage: e.message\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport { MessagingService } from '../messaging-service';\nimport { registerDefaultSw } from './registerDefaultSw';\n\nexport async function updateSwReg(\n  messaging: MessagingService,\n  swRegistration?: ServiceWorkerRegistration | undefined\n): Promise<void> {\n  if (!swRegistration && !messaging.swRegistration) {\n    await registerDefaultSw(messaging);\n  }\n\n  if (!swRegistration && !!messaging.swRegistration) {\n    return;\n  }\n\n  if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n  }\n\n  messaging.swRegistration = swRegistration;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY } from '../util/constants';\nimport { MessagingService } from '../messaging-service';\n\nexport async function updateVapidKey(\n  messaging: MessagingService,\n  vapidKey?: string | undefined\n): Promise<void> {\n  if (!!vapidKey) {\n    messaging.vapidKey = vapidKey;\n  } else if (!messaging.vapidKey) {\n    messaging.vapidKey = DEFAULT_VAPID_KEY;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport { MessagingService } from '../messaging-service';\nimport { getTokenInternal } from '../internals/token-manager';\nimport { updateSwReg } from '../helpers/updateSwReg';\nimport { updateVapidKey } from '../helpers/updateVapidKey';\nimport { GetTokenOptions } from '../interfaces/public-types';\n\nexport async function getToken(\n  messaging: MessagingService,\n  options?: GetTokenOptions\n): Promise<string> {\n  if (!navigator) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  if (Notification.permission === 'default') {\n    await Notification.requestPermission();\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  await updateVapidKey(messaging, options?.vapidKey);\n  await updateSwReg(messaging, options?.serviceWorkerRegistration);\n\n  return getTokenInternal(messaging);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessageType\n} from '../interfaces/internal-message-payload';\n\nimport { MessagingService } from '../messaging-service';\n\nexport async function logToScion(\n  messaging: MessagingService,\n  messageType: MessageType,\n  data: ConsoleMessageData\n): Promise<void> {\n  const eventType = getEventType(messageType);\n  const analytics =\n    await messaging.firebaseDependencies.analyticsProvider.get();\n  analytics.logEvent(eventType, {\n    /* eslint-disable camelcase */\n    message_id: data[CONSOLE_CAMPAIGN_ID],\n    message_name: data[CONSOLE_CAMPAIGN_NAME],\n    message_time: data[CONSOLE_CAMPAIGN_TIME],\n    message_device_time: Math.floor(Date.now() / 1000)\n    /* eslint-enable camelcase */\n  });\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\n\nimport { CONSOLE_CAMPAIGN_ANALYTICS_ENABLED } from '../util/constants';\nimport { MessagingService } from '../messaging-service';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { logToScion } from '../helpers/logToScion';\n\nexport async function messageEventListener(\n  messaging: MessagingService,\n  event: MessageEvent\n): Promise<void> {\n  const internalPayload = event.data as MessagePayloadInternal;\n\n  if (!internalPayload.isFirebaseMessaging) {\n    return;\n  }\n\n  if (\n    messaging.onMessageHandler &&\n    internalPayload.messageType === MessageType.PUSH_RECEIVED\n  ) {\n    if (typeof messaging.onMessageHandler === 'function') {\n      messaging.onMessageHandler(externalizePayload(internalPayload));\n    } else {\n      messaging.onMessageHandler.next(externalizePayload(internalPayload));\n    }\n  }\n\n  // Log to Scion if applicable\n  const dataPayload = internalPayload.data;\n  if (\n    isConsoleMessage(dataPayload) &&\n    dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n  ) {\n    await logToScion(messaging, internalPayload.messageType!, dataPayload);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport {\n  onNotificationClick,\n  onPush,\n  onSubChange\n} from '../listeners/sw-listeners';\n\nimport { GetTokenOptions } from '../interfaces/public-types';\nimport { MessagingInternal } from '@firebase/messaging-interop-types';\nimport { MessagingService } from '../messaging-service';\nimport { ServiceWorkerGlobalScope } from '../util/sw-types';\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { getToken } from '../api/getToken';\nimport { messageEventListener } from '../listeners/window-listener';\n\nimport { name, version } from '../../package.json';\n\nconst WindowMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  navigator.serviceWorker.addEventListener('message', e =>\n    messageEventListener(messaging as MessagingService, e)\n  );\n\n  return messaging;\n};\n\nconst WindowMessagingInternalFactory: InstanceFactory<'messaging-internal'> = (\n  container: ComponentContainer\n) => {\n  const messaging = container\n    .getProvider('messaging')\n    .getImmediate() as MessagingService;\n\n  const messagingInternal: MessagingInternal = {\n    getToken: (options?: GetTokenOptions) => getToken(messaging, options)\n  };\n\n  return messagingInternal;\n};\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst SwMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  self.addEventListener('push', e => {\n    e.waitUntil(onPush(e, messaging as MessagingService));\n  });\n  self.addEventListener('pushsubscriptionchange', e => {\n    e.waitUntil(onSubChange(e, messaging as MessagingService));\n  });\n  self.addEventListener('notificationclick', e => {\n    e.waitUntil(onNotificationClick(e));\n  });\n\n  return messaging;\n};\n\nexport function registerMessagingInWindow(): void {\n  _registerComponent(\n    new Component('messaging', WindowMessagingFactory, ComponentType.PUBLIC)\n  );\n\n  _registerComponent(\n    new Component(\n      'messaging-internal',\n      WindowMessagingInternalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\n/**\n * The messaging instance registered in sw is named differently than that of in client. This is\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\n * `messaging-compat` and component with the same name can only be registered once.\n */\nexport function registerMessagingInSw(): void {\n  _registerComponent(\n    new Component('messaging-sw', SwMessagingFactory, ComponentType.PUBLIC)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n/**\n * Checks if all required APIs exist in the browser.\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isWindowSupported(): Promise<boolean> {\n  try {\n    // This throws if open() is unsupported, so adding it to the conditional\n    // statement below can cause an uncaught error.\n    await validateIndexedDBOpenable();\n  } catch (e) {\n    return false;\n  }\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks whether all required APIs exist within SW Context\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isSwSupported(): Promise<boolean> {\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    isIndexedDBAvailable() &&\n    (await validateIndexedDBOpenable()) &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport { MessagingService } from '../messaging-service';\nimport { deleteTokenInternal } from '../internals/token-manager';\nimport { registerDefaultSw } from '../helpers/registerDefaultSw';\n\nexport async function deleteToken(\n  messaging: MessagingService\n): Promise<boolean> {\n  if (!navigator) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  if (!messaging.swRegistration) {\n    await registerDefaultSw(messaging);\n  }\n\n  return deleteTokenInternal(messaging);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport {\n  MessagePayload,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function onMessage(\n  messaging: MessagingService,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  if (!navigator) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  messaging.onMessageHandler = nextOrObserver;\n\n  return () => {\n    messaging.onMessageHandler = null;\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport { FirebaseApp, _getProvider, getApp } from '@firebase/app';\nimport {\n  GetTokenOptions,\n  MessagePayload,\n  Messaging\n} from './interfaces/public-types';\nimport {\n  NextFn,\n  Observer,\n  Unsubscribe,\n  getModularInstance\n} from '@firebase/util';\nimport { isSwSupported, isWindowSupported } from './api/isSupported';\n\nimport { MessagingService } from './messaging-service';\nimport { deleteToken as _deleteToken } from './api/deleteToken';\nimport { getToken as _getToken } from './api/getToken';\nimport { onBackgroundMessage as _onBackgroundMessage } from './api/onBackgroundMessage';\nimport { onMessage as _onMessage } from './api/onMessage';\nimport { _setDeliveryMetricsExportedToBigQueryEnabled } from './api/setDeliveryMetricsExportedToBigQueryEnabled';\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInWindow(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isWindowSupported().then(\n    isSupported => {\n      // If `isWindowSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isWindowSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging').getImmediate();\n}\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInSw(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(\n    isSupported => {\n      // If `isSwSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isSwSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n\n/**\n * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud\n * Messaging registration token that can be used to send push messages to that {@link Messaging}\n * instance.\n *\n * If a notification permission isn't already granted, this method asks the user for permission. The\n * returned promise rejects if the user does not allow the app to show notifications.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param options - Provides an optional vapid key and an optinoal service worker registration\n *\n * @returns The promise resolves with an FCM registration token.\n *\n * @public\n */\nexport async function getToken(\n  messaging: Messaging,\n  options?: GetTokenOptions\n): Promise<string> {\n  messaging = getModularInstance(messaging);\n  return _getToken(messaging as MessagingService, options);\n}\n\n/**\n * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes\n * the {@link Messaging} instance from the push subscription.\n *\n * @param messaging - The {@link Messaging} instance.\n *\n * @returns The promise resolves when the token has been successfully deleted.\n *\n * @public\n */\nexport function deleteToken(messaging: Messaging): Promise<boolean> {\n  messaging = getModularInstance(messaging);\n  return _deleteToken(messaging as MessagingService);\n}\n\n/**\n * When a push message is received and the user is currently on a page for your origin, the\n * message is passed to the page and an `onMessage()` event is dispatched with the payload of\n * the push message.\n *\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined,\n *     is called when a message is received and the user is currently viewing your page.\n * @returns To stop listening for messages execute this returned function.\n *\n * @public\n */\nexport function onMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Called when a message is received while the app is in the background. An app is considered to be\n * in the background if no active window is displayed.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\n * message is received and the app is currently in the background.\n *\n * @returns To stop listening for messages execute this returned function\n *\n * @public\n */\nexport function onBackgroundMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onBackgroundMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\n * disable the export at runtime.\n *\n * @param messaging - The `FirebaseMessaging` instance.\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\n * BigQuery.\n *\n * @public\n */\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n", "/**\n * Firebase Cloud Messaging\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport { Messaging } from './interfaces/public-types';\nimport { registerMessagingInWindow } from './helpers/register';\n\nexport {\n  getToken,\n  deleteToken,\n  onMessage,\n  getMessagingInWindow as getMessaging\n} from './api';\nexport { isWindowSupported as isSupported } from './api/isSupported';\nexport * from './interfaces/public-types';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging': Messaging;\n  }\n}\n\nregisterMessagingInWindow();\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const TAG = 'FirebaseMessaging: ';\nexport const MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST = 1000;\nexport const MAX_RETRIES = 3;\nexport const LOG_INTERVAL_IN_MS = 86400000; //24 hour\nexport const DEFAULT_BACKOFF_TIME_MS = 5000;\n\n// FCM log source name registered at Firelog: 'FCM_CLIENT_EVENT_LOGGING'. It uniquely identifies\n// FCM's logging configuration.\nexport const FCM_LOG_SOURCE = 1249;\n\n// Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\nexport const SDK_PLATFORM_WEB = 3;\nexport const EVENT_MESSAGE_DELIVERED = 1;\n\nexport enum MessageType {\n  DATA_MESSAGE = 1,\n  DISPLAY_NOTIFICATION = 3\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  fcmMessageId: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (\n      indexedDB as {\n        databases(): Promise<Array<{ name: string; version: number }>>;\n      }\n    ).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from '../helpers/migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  INDEXED_DB_UNSUPPORTED = 'indexed-db-unsupported',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [ErrorCode.INDEXED_DB_UNSUPPORTED]:\n    \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from './idb-manager';\nimport {\n  requestDeleteToken,\n  requestGetToken,\n  requestUpdateToken\n} from './requests';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { MessagingService } from '../messaging-service';\n\n// UpdateRegistration will be called once every week.\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getTokenInternal(\n  messaging: MessagingService\n): Promise<string> {\n  const pushSubscription = await getPushSubscription(\n    messaging.swRegistration!,\n    messaging.vapidKey!\n  );\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey: messaging.vapidKey!,\n    swScope: messaging.swRegistration!.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(\n        messaging.firebaseDependencies!,\n        tokenDetails.token\n      );\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(messaging.firebaseDependencies!, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(messaging, {\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n    });\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteTokenInternal(\n  messaging: MessagingService\n): Promise<boolean> {\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(\n      messaging.firebaseDependencies,\n      tokenDetails.token\n    );\n    await dbRemove(messaging.firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription =\n    await messaging.swRegistration!.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  messaging: MessagingService,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      messaging.firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteTokenInternal(messaging);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '../interfaces/public-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_BACKOFF_TIME_MS,\n  EVENT_MESSAGE_DELIVERED,\n  FCM_LOG_SOURCE,\n  LOG_INTERVAL_IN_MS,\n  MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST,\n  MAX_RETRIES,\n  MessageType,\n  SDK_PLATFORM_WEB\n} from '../util/constants';\nimport {\n  FcmEvent,\n  LogEvent,\n  LogRequest,\n  LogResponse\n} from '../interfaces/logging-types';\n\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\nimport { MessagingService } from '../messaging-service';\n\nconst FIRELOG_ENDPOINT = _mergeStrings(\n  'hts/frbslgigp.ogepscmv/ieo/eaylg',\n  'tp:/ieaeogn-agolai.o/1frlglgc/o'\n);\n\nconst FCM_TRANSPORT_KEY = _mergeStrings(\n  'AzSCbw63g1R0nCw85jG8',\n  'Iaya3yLKwmgvh7cF0q4'\n);\n\nexport function startLoggingService(messaging: MessagingService): void {\n  if (!messaging.isLogServiceStarted) {\n    _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    messaging.isLogServiceStarted = true;\n  }\n}\n\n/**\n *\n * @param messaging the messaging instance.\n * @param offsetInMs this method execute after `offsetInMs` elapsed .\n */\nexport function _processQueue(\n  messaging: MessagingService,\n  offsetInMs: number\n): void {\n  setTimeout(async () => {\n    if (!messaging.deliveryMetricsExportedToBigQueryEnabled) {\n      // flush events and terminate logging service\n      messaging.logEvents = [];\n      messaging.isLogServiceStarted = false;\n\n      return;\n    }\n\n    if (!messaging.logEvents.length) {\n      return _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    }\n\n    await _dispatchLogEvents(messaging);\n  }, offsetInMs);\n}\n\nexport async function _dispatchLogEvents(\n  messaging: MessagingService\n): Promise<void> {\n  for (\n    let i = 0, n = messaging.logEvents.length;\n    i < n;\n    i += MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST\n  ) {\n    const logRequest = _createLogRequest(\n      messaging.logEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST)\n    );\n\n    let retryCount = 0,\n      response = {} as Response;\n\n    do {\n      try {\n        response = await fetch(\n          FIRELOG_ENDPOINT.concat('?key=', FCM_TRANSPORT_KEY),\n          {\n            method: 'POST',\n            body: JSON.stringify(logRequest)\n          }\n        );\n\n        // don't retry on 200s or non retriable errors\n        if (response.ok || (!response.ok && !isRetriableError(response))) {\n          break;\n        }\n\n        if (!response.ok && isRetriableError(response)) {\n          // rethrow to retry with quota\n          throw new Error(\n            'a retriable Non-200 code is returned in fetch to Firelog endpoint. Retry'\n          );\n        }\n      } catch (error) {\n        const isLastAttempt = retryCount === MAX_RETRIES;\n        if (isLastAttempt) {\n          // existing the do-while interactive retry logic because retry quota has reached.\n          break;\n        }\n      }\n\n      let delayInMs: number;\n      try {\n        delayInMs = Number(\n          ((await response.json()) as LogResponse).nextRequestWaitMillis\n        );\n      } catch (e) {\n        delayInMs = DEFAULT_BACKOFF_TIME_MS;\n      }\n\n      await new Promise(resolve => setTimeout(resolve, delayInMs));\n\n      retryCount++;\n    } while (retryCount < MAX_RETRIES);\n  }\n\n  messaging.logEvents = [];\n  // schedule for next logging\n  _processQueue(messaging, LOG_INTERVAL_IN_MS);\n}\n\nfunction isRetriableError(response: Response): boolean {\n  const httpStatus = response.status;\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\nexport async function stageLog(\n  messaging: MessagingService,\n  internalPayload: MessagePayloadInternal\n): Promise<void> {\n  const fcmEvent = createFcmEvent(\n    internalPayload,\n    await messaging.firebaseDependencies.installations.getId()\n  );\n\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\n\nfunction createFcmEvent(\n  internalPayload: MessagePayloadInternal,\n  fid: string\n): FcmEvent {\n  const fcmEvent = {} as FcmEvent;\n\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n  if (!!internalPayload.from) {\n    fcmEvent.project_number = internalPayload.from;\n  }\n\n  if (!!internalPayload.fcmMessageId) {\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n  }\n\n  fcmEvent.instance_id = fid;\n\n  if (!!internalPayload.notification) {\n    fcmEvent.message_type = MessageType.DISPLAY_NOTIFICATION.toString();\n  } else {\n    fcmEvent.message_type = MessageType.DATA_MESSAGE.toString();\n  }\n\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n\n  if (!!internalPayload.collapse_key) {\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n  }\n\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n\n  if (!!internalPayload.fcmOptions?.analytics_label) {\n    fcmEvent.analytics_label = internalPayload.fcmOptions?.analytics_label;\n  }\n\n  /* eslint-enable camelcase */\n  return fcmEvent;\n}\n\nfunction createAndEnqueueLogEvent(\n  messaging: MessagingService,\n  fcmEvent: FcmEvent\n): void {\n  const logEvent = {} as LogEvent;\n\n  /* eslint-disable camelcase */\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent);\n  // eslint-disable-next-line camelcase\n\n  messaging.logEvents.push(logEvent);\n}\n\nexport function _createLogRequest(logEventQueue: LogEvent[]): LogRequest {\n  const logRequest = {} as LogRequest;\n\n  /* eslint-disable camelcase */\n  logRequest.log_source = FCM_LOG_SOURCE.toString();\n  logRequest.log_event = logEventQueue;\n  /* eslint-enable camelcase */\n\n  return logRequest;\n}\n\nexport function _mergeStrings(s1: string, s2: string): string {\n  const resultArray = [];\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, FCM_MSG } from '../util/constants';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport {\n  NotificationEvent,\n  PushEvent,\n  PushSubscriptionChangeEvent,\n  ServiceWorkerGlobalScope,\n  WindowClient\n} from '../util/sw-types';\nimport {\n  deleteTokenInternal,\n  getTokenInternal\n} from '../internals/token-manager';\n\nimport { MessagingService } from '../messaging-service';\nimport { dbGet } from '../internals/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\nimport { stageLog } from '../helpers/logToFirelog';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport async function onSubChange(\n  event: PushSubscriptionChangeEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const { newSubscription } = event;\n  if (!newSubscription) {\n    // Subscription revoked, delete token\n    await deleteTokenInternal(messaging);\n    return;\n  }\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  await deleteTokenInternal(messaging);\n\n  messaging.vapidKey =\n    tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n  await getTokenInternal(messaging);\n}\n\nexport async function onPush(\n  event: PushEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const internalPayload = getMessagePayloadInternal(event);\n  if (!internalPayload) {\n    // Failed to get parsed MessagePayload from the PushEvent. Skip handling the push.\n    return;\n  }\n\n  // log to Firelog with user consent\n  if (messaging.deliveryMetricsExportedToBigQueryEnabled) {\n    await stageLog(messaging, internalPayload);\n  }\n\n  // foreground handling: eventually passed to onMessage hook\n  const clientList = await getClientList();\n  if (hasVisibleClients(clientList)) {\n    return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n  }\n\n  // background handling: display if possible and pass to onBackgroundMessage hook\n  if (!!internalPayload.notification) {\n    await showNotification(wrapInternalPayload(internalPayload));\n  }\n\n  if (!messaging) {\n    return;\n  }\n\n  if (!!messaging.onBackgroundMessageHandler) {\n    const payload = externalizePayload(internalPayload);\n\n    if (typeof messaging.onBackgroundMessageHandler === 'function') {\n      await messaging.onBackgroundMessageHandler(payload);\n    } else {\n      messaging.onBackgroundMessageHandler.next(payload);\n    }\n  }\n}\n\nexport async function onNotificationClick(\n  event: NotificationEvent\n): Promise<void> {\n  const internalPayload: MessagePayloadInternal =\n    event.notification?.data?.[FCM_MSG];\n\n  if (!internalPayload) {\n    return;\n  } else if (event.action) {\n    // User clicked on an action button. This will allow developers to act on action button clicks\n    // by using a custom onNotificationClick listener that they define.\n    return;\n  }\n\n  // Prevent other listeners from receiving the event\n  event.stopImmediatePropagation();\n  event.notification.close();\n\n  // Note clicking on a notification with no link set will focus the Chrome's current tab.\n  const link = getLink(internalPayload);\n  if (!link) {\n    return;\n  }\n\n  // FM should only open/focus links from app's origin.\n  const url = new URL(link, self.location.href);\n  const originUrl = new URL(self.location.origin);\n\n  if (url.host !== originUrl.host) {\n    return;\n  }\n\n  let client = await getWindowClient(url);\n\n  if (!client) {\n    client = await self.clients.openWindow(link);\n\n    // Wait three seconds for the client to initialize and set up the message handler so that it\n    // can receive the message.\n    await sleep(3000);\n  } else {\n    client = await client.focus();\n  }\n\n  if (!client) {\n    // Window Client will not be returned if it's for a third party origin.\n    return;\n  }\n\n  internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n  internalPayload.isFirebaseMessaging = true;\n  return client.postMessage(internalPayload);\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...(internalPayload.notification as unknown as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { MessagePayload, NextFn, Observer } from './interfaces/public-types';\n\nimport { FirebaseAnalyticsInternalName } from '@firebase/analytics-interop-types';\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { LogEvent } from './interfaces/logging-types';\nimport { Provider } from '@firebase/component';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { extractAppConfig } from './helpers/extract-app-config';\n\nexport class MessagingService implements _FirebaseService {\n  readonly app!: FirebaseApp;\n  readonly firebaseDependencies!: FirebaseInternalDependencies;\n\n  swRegistration?: ServiceWorkerRegistration;\n  vapidKey?: string;\n  // logging is only done with end user consent. Default to false.\n  deliveryMetricsExportedToBigQueryEnabled: boolean = false;\n\n  onBackgroundMessageHandler:\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload>\n    | null = null;\n\n  onMessageHandler: NextFn<MessagePayload> | Observer<MessagePayload> | null =\n    null;\n\n  logEvents: LogEvent[] = [];\n  isLogServiceStarted: boolean = false;\n\n  constructor(\n    app: FirebaseApp,\n    installations: _FirebaseInstallationsInternal,\n    analyticsProvider: Provider<FirebaseAnalyticsInternalName>\n  ) {\n    const appConfig = extractAppConfig(app);\n\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n\n  _delete(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport {\n  onNotificationClick,\n  onPush,\n  onSubChange\n} from '../listeners/sw-listeners';\n\nimport { GetTokenOptions } from '../interfaces/public-types';\nimport { MessagingInternal } from '@firebase/messaging-interop-types';\nimport { MessagingService } from '../messaging-service';\nimport { ServiceWorkerGlobalScope } from '../util/sw-types';\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { getToken } from '../api/getToken';\nimport { messageEventListener } from '../listeners/window-listener';\n\nimport { name, version } from '../../package.json';\n\nconst WindowMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  navigator.serviceWorker.addEventListener('message', e =>\n    messageEventListener(messaging as MessagingService, e)\n  );\n\n  return messaging;\n};\n\nconst WindowMessagingInternalFactory: InstanceFactory<'messaging-internal'> = (\n  container: ComponentContainer\n) => {\n  const messaging = container\n    .getProvider('messaging')\n    .getImmediate() as MessagingService;\n\n  const messagingInternal: MessagingInternal = {\n    getToken: (options?: GetTokenOptions) => getToken(messaging, options)\n  };\n\n  return messagingInternal;\n};\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst SwMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  self.addEventListener('push', e => {\n    e.waitUntil(onPush(e, messaging as MessagingService));\n  });\n  self.addEventListener('pushsubscriptionchange', e => {\n    e.waitUntil(onSubChange(e, messaging as MessagingService));\n  });\n  self.addEventListener('notificationclick', e => {\n    e.waitUntil(onNotificationClick(e));\n  });\n\n  return messaging;\n};\n\nexport function registerMessagingInWindow(): void {\n  _registerComponent(\n    new Component('messaging', WindowMessagingFactory, ComponentType.PUBLIC)\n  );\n\n  _registerComponent(\n    new Component(\n      'messaging-internal',\n      WindowMessagingInternalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\n/**\n * The messaging instance registered in sw is named differently than that of in client. This is\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\n * `messaging-compat` and component with the same name can only be registered once.\n */\nexport function registerMessagingInSw(): void {\n  _registerComponent(\n    new Component('messaging-sw', SwMessagingFactory, ComponentType.PUBLIC)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n/**\n * Checks if all required APIs exist in the browser.\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isWindowSupported(): Promise<boolean> {\n  try {\n    // This throws if open() is unsupported, so adding it to the conditional\n    // statement below can cause an uncaught error.\n    await validateIndexedDBOpenable();\n  } catch (e) {\n    return false;\n  }\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks whether all required APIs exist within SW Context\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isSwSupported(): Promise<boolean> {\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    isIndexedDBAvailable() &&\n    (await validateIndexedDBOpenable()) &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport {\n  MessagePayload,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function onBackgroundMessage(\n  messaging: MessagingService,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  if (self.document !== undefined) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  messaging.onBackgroundMessageHandler = nextOrObserver;\n\n  return () => {\n    messaging.onBackgroundMessageHandler = null;\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Messaging } from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function _setDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  (messaging as MessagingService).deliveryMetricsExportedToBigQueryEnabled =\n    enable;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport { FirebaseApp, _getProvider, getApp } from '@firebase/app';\nimport {\n  GetTokenOptions,\n  MessagePayload,\n  Messaging\n} from './interfaces/public-types';\nimport {\n  NextFn,\n  Observer,\n  Unsubscribe,\n  getModularInstance\n} from '@firebase/util';\nimport { isSwSupported, isWindowSupported } from './api/isSupported';\n\nimport { MessagingService } from './messaging-service';\nimport { deleteToken as _deleteToken } from './api/deleteToken';\nimport { getToken as _getToken } from './api/getToken';\nimport { onBackgroundMessage as _onBackgroundMessage } from './api/onBackgroundMessage';\nimport { onMessage as _onMessage } from './api/onMessage';\nimport { _setDeliveryMetricsExportedToBigQueryEnabled } from './api/setDeliveryMetricsExportedToBigQueryEnabled';\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInWindow(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isWindowSupported().then(\n    isSupported => {\n      // If `isWindowSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isWindowSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging').getImmediate();\n}\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInSw(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(\n    isSupported => {\n      // If `isSwSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isSwSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n\n/**\n * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud\n * Messaging registration token that can be used to send push messages to that {@link Messaging}\n * instance.\n *\n * If a notification permission isn't already granted, this method asks the user for permission. The\n * returned promise rejects if the user does not allow the app to show notifications.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param options - Provides an optional vapid key and an optinoal service worker registration\n *\n * @returns The promise resolves with an FCM registration token.\n *\n * @public\n */\nexport async function getToken(\n  messaging: Messaging,\n  options?: GetTokenOptions\n): Promise<string> {\n  messaging = getModularInstance(messaging);\n  return _getToken(messaging as MessagingService, options);\n}\n\n/**\n * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes\n * the {@link Messaging} instance from the push subscription.\n *\n * @param messaging - The {@link Messaging} instance.\n *\n * @returns The promise resolves when the token has been successfully deleted.\n *\n * @public\n */\nexport function deleteToken(messaging: Messaging): Promise<boolean> {\n  messaging = getModularInstance(messaging);\n  return _deleteToken(messaging as MessagingService);\n}\n\n/**\n * When a push message is received and the user is currently on a page for your origin, the\n * message is passed to the page and an `onMessage()` event is dispatched with the payload of\n * the push message.\n *\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined,\n *     is called when a message is received and the user is currently viewing your page.\n * @returns To stop listening for messages execute this returned function.\n *\n * @public\n */\nexport function onMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Called when a message is received while the app is in the background. An app is considered to be\n * in the background if no active window is displayed.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\n * message is received and the app is currently in the background.\n *\n * @returns To stop listening for messages execute this returned function\n *\n * @public\n */\nexport function onBackgroundMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onBackgroundMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\n * disable the export at runtime.\n *\n * @param messaging - The `FirebaseMessaging` instance.\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\n * BigQuery.\n *\n * @public\n */\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport { Messaging } from './interfaces/public-types';\nimport { registerMessagingInSw } from './helpers/register';\n\nexport * from './interfaces/public-types';\nexport {\n  onBackgroundMessage,\n  getMessagingInSw as getMessaging,\n  experimentalSetDeliveryMetricsExportedToBigQueryEnabled\n} from './api';\nexport { isSwSupported as isSupported } from './api/isSupported';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging-sw': Messaging;\n  }\n}\n\nregisterMessagingInSw();\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp as AppCompat,\n  _FirebaseService\n} from '@firebase/app-compat';\nimport {\n  Messaging,\n  MessagePayload,\n  deleteToken,\n  getToken,\n  onMessage\n} from '@firebase/messaging';\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '@firebase/util';\n\nimport { onBackgroundMessage } from '@firebase/messaging/sw';\n\nexport interface MessagingCompat {\n  getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string>;\n\n  deleteToken(): Promise<boolean>;\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n}\n\nexport function isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n * Unlike the modular version, it does not check if IndexedDB.open() is allowed\n * in order to keep isSupported() synchronous and maintain v8 compatibility.\n */\nfunction isWindowSupported(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSwSupported(): boolean {\n  return (\n    isIndexedDBAvailable() &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\nexport class MessagingCompatImpl implements MessagingCompat, _FirebaseService {\n  constructor(readonly app: AppCompat, readonly _delegate: Messaging) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    return getToken(this._delegate, options);\n  }\n\n  async deleteToken(): Promise<boolean> {\n    return deleteToken(this._delegate);\n  }\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onMessage(this._delegate, nextOrObserver);\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onBackgroundMessage(this._delegate, nextOrObserver);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport { MessagingCompatImpl, isSupported } from './messaging-compat';\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging-compat': MessagingCompatImpl;\n  }\n}\n\nconst messagingCompatFactory: InstanceFactory<'messaging-compat'> = (\n  container: ComponentContainer\n) => {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging-sw').getImmediate()\n    );\n  } else {\n    // in window\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging').getImmediate()\n    );\n  }\n};\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\nexport function registerMessagingCompat(): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'messaging-compat',\n      messagingCompatFactory,\n      ComponentType.PUBLIC\n    ).setServiceProps(NAMESPACE_EXPORTS)\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name, version } from '../package.json';\n\nimport firebase from '@firebase/app-compat';\nimport { registerMessagingCompat } from './registerMessagingCompat';\nimport { MessagingCompat } from './messaging-compat';\n\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): MessagingCompat;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): MessagingCompat;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to StorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so \u00AF\\_(\u30C4)_/\u00AF\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (progressEvent: ProgressEvent) => void =\n        progressEvent => {\n          const loaded = progressEvent.loaded;\n          const total = progressEvent.lengthComputable\n            ? progressEvent.total\n            : -1;\n          if (this.progressCallback_ !== null) {\n            this.progressCallback_(loaded, total);\n          }\n        };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || this.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: Unsubscribe | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageReference } from './public-types';\nimport { Reference, getBlobInternal } from './reference';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nexport function getBlob(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nexport function getStream(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n", "/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot>\n{\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  StorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '@firebase/storage';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: StorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: StorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '@firebase/storage';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  UploadMetadata,\n  FullMetadata,\n  SettableMetadata,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob,\n  _dataFromString,\n  _invalidRootOperation\n} from '@firebase/storage';\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as UploadMetadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: types.UploadMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = { ...metadata };\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone as FullMetadata & { [k: string]: string }\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as SettableMetadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  connectStorageEmulator,\n  FirebaseStorage,\n  _Location,\n  _invalidArgument,\n  _FirebaseStorageImpl\n} from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw _invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw _invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as _FirebaseStorageImpl).host);\n    } catch (e) {\n      throw _invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n\nfunction isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  StringFormat,\n  _TaskEvent as TaskEvent,\n  _TaskState as TaskState\n} from '@firebase/storage';\n\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container\n    .getProvider('storage')\n    .getImmediate({ identifier: url });\n\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    storageExp\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as unknown as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp, url?: string): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input',\n  ALREADY_INITIALIZED = 'already initialized'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.',\n  [ErrorCode.ALREADY_INITIALIZED]:\n    'initializePerformance() has already been called with ' +\n    'different options. To avoid this error, call initializePerformance() with the ' +\n    'same options as when it was originally called, or call getPerformance() to return the' +\n    ' already initialized instance.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\n\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    perfMetrics?: { onFirstInputDelay(fn: (fid: number) => void): void };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  readonly onFirstInputDelay?: (fn: (fid: number) => void) => void;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (!fetch || !Promise || !areCookiesEnabled()) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const iidPromise = installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const authTokenPromise = installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getAppId(firebaseApp: FirebaseApp): string {\n  const appId = firebaseApp.options?.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n  }\n  return appId;\n}\n\nexport function getProjectId(firebaseApp: FirebaseApp): string {\n  const projectId = firebaseApp.options?.projectId;\n  if (!projectId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n  }\n  return projectId;\n}\n\nexport function getApiKey(firebaseApp: FirebaseApp): string {\n  const apiKey = firebaseApp.options?.apiKey;\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n  }\n  return apiKey;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\nimport { PerformanceController } from '../controllers/perf';\nimport { getProjectId, getApiKey, getAppId } from '../utils/app_utils';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(performanceController, iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations)\n    .then(authToken => {\n      const projectId = getProjectId(performanceController.app);\n      const apiKey = getApiKey(performanceController.app);\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: getAppId(performanceController.app),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(\n  performanceController: PerformanceController\n): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise =\n    initializationPromise || initializePerf(performanceController);\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(\n  performanceController: PerformanceController\n): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise(performanceController.installations))\n    .then(iid => getConfig(performanceController, iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl =\n    SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { getAppId } from '../utils/app_utils';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(\n      networkRequest.performanceController.app\n    ),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(firebaseApp: FirebaseApp): ApplicationInfo {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '../public_types';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param performanceController The performance controller running.\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly performanceController: PerformanceController,\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    performanceController: PerformanceController,\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(\n      performanceController,\n      OOB_TRACE_PAGE_LOAD_PREFIX + route,\n      true\n    );\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(\n    performanceController: PerformanceController,\n    measureName: string\n  ): void {\n    const trace = new Trace(\n      performanceController,\n      measureName,\n      false,\n      measureName\n    );\n    logTrace(trace);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\nimport { PerformanceController } from '../controllers/perf';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  performanceController: PerformanceController;\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(\n  performanceController: PerformanceController,\n  entry: PerformanceEntry\n): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    performanceController,\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(\n  performanceController: PerformanceController\n): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(performanceController), 0);\n  setTimeout(() => setupNetworkRequests(performanceController), 0);\n  setTimeout(() => setupUserTimingTraces(performanceController), 0);\n}\n\nfunction setupNetworkRequests(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(performanceController, resource);\n  }\n  api.setupObserver('resource', entry =>\n    createNetworkRequestEntry(performanceController, entry)\n  );\n}\n\nfunction setupOobTraces(performanceController: PerformanceController): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(\n        performanceController,\n        navigationTimings,\n        paintTimings\n      );\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(\n          performanceController,\n          navigationTimings,\n          paintTimings,\n          fid\n        );\n      }\n    });\n  } else {\n    Trace.createOobTrace(\n      performanceController,\n      navigationTimings,\n      paintTimings\n    );\n  }\n}\n\nfunction setupUserTimingTraces(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(performanceController, measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', entry =>\n    createUserTimingTrace(performanceController, entry)\n  );\n}\n\nfunction createUserTimingTrace(\n  performanceController: PerformanceController,\n  measure: PerformanceEntry\n): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { PerformanceSettings, FirebasePerformance } from '../public_types';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { setupTransportService } from '../services/transport_service';\nimport { consoleLogger } from '../utils/console_logger';\n\nexport class PerformanceController implements FirebasePerformance {\n  private initialized: boolean = false;\n\n  constructor(\n    readonly app: FirebaseApp,\n    readonly installations: _FirebaseInstallationsInternal\n  ) {}\n\n  /**\n   * This method *must* be called internally as part of creating a\n   * PerformanceController instance.\n   *\n   * Currently it's not possible to pass the settings object through the\n   * constructor using Components, so this method exists to be called with the\n   * desired settings, to ensure nothing is collected without the user's\n   * consent.\n   */\n  _init(settings?: PerformanceSettings): void {\n    if (this.initialized) {\n      return;\n    }\n\n    if (settings?.dataCollectionEnabled !== undefined) {\n      this.dataCollectionEnabled = settings.dataCollectionEnabled;\n    }\n    if (settings?.instrumentationEnabled !== undefined) {\n      this.instrumentationEnabled = settings.instrumentationEnabled;\n    }\n\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise(this).then(\n              () => setupOobResources(this),\n              () => setupOobResources(this)\n            );\n            this.initialized = true;\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    } else {\n      consoleLogger.info(\n        'Firebase Performance cannot start if the browser does not support ' +\n          '\"Fetch\" and \"Promise\", or cookies are disabled.'\n      );\n    }\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n", "/**\n * Firebase Performance Monitoring\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebasePerformance,\n  PerformanceSettings,\n  PerformanceTrace\n} from './public_types';\nimport { ERROR_FACTORY, ErrorCode } from './utils/errors';\nimport { setupApi } from './services/api_service';\nimport { PerformanceController } from './controllers/perf';\nimport {\n  _registerComponent,\n  _getProvider,\n  registerVersion,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport {\n  InstanceFactory,\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { name, version } from '../package.json';\nimport { Trace } from './resources/trace';\nimport '@firebase/installations';\nimport { deepEqual, getModularInstance } from '@firebase/util';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @public\n */\nexport function getPerformance(\n  app: FirebaseApp = getApp()\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n  const perfInstance = provider.getImmediate() as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\n * @public\n */\nexport function initializePerformance(\n  app: FirebaseApp,\n  settings?: PerformanceSettings\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n\n  // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialSettings = provider.getOptions() as PerformanceSettings;\n    if (deepEqual(initialSettings, settings ?? {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const perfInstance = provider.initialize({\n    options: settings\n  }) as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a new `PerformanceTrace` instance.\n * @param performance - The {@link FirebasePerformance} instance to use.\n * @param name - The name of the trace.\n * @public\n */\nexport function trace(\n  performance: FirebasePerformance,\n  name: string\n): PerformanceTrace {\n  performance = getModularInstance(performance);\n  return new Trace(performance as PerformanceController, name);\n}\n\nconst factory: InstanceFactory<'performance'> = (\n  container: ComponentContainer,\n  { options: settings }: { options?: PerformanceSettings }\n) => {\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const installations = container\n    .getProvider('installations-internal')\n    .getImmediate();\n\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n  }\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n  }\n  setupApi(window);\n  const perfInstance = new PerformanceController(app, installations);\n  perfInstance._init(settings);\n\n  return perfInstance;\n};\n\nfunction registerPerformance(): void {\n  _registerComponent(\n    new Component('performance', factory, ComponentType.PUBLIC)\n  );\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterPerformance();\n\nexport { FirebasePerformance, PerformanceSettings, PerformanceTrace };\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  trace,\n  FirebasePerformance,\n  // The PerformanceTrace type has not changed between modular and non-modular packages.\n  PerformanceTrace\n} from '@firebase/performance';\nimport { FirebasePerformance as FirebasePerformanceCompat } from '@firebase/performance-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\n\nexport class PerformanceCompatImpl\n  implements FirebasePerformanceCompat, _FirebaseService\n{\n  constructor(\n    public app: FirebaseApp,\n    readonly _delegate: FirebasePerformance\n  ) {}\n\n  get instrumentationEnabled(): boolean {\n    return this._delegate.instrumentationEnabled;\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    this._delegate.instrumentationEnabled = val;\n  }\n\n  get dataCollectionEnabled(): boolean {\n    return this._delegate.dataCollectionEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    this._delegate.dataCollectionEnabled = val;\n  }\n\n  trace(traceName: string): PerformanceTrace {\n    return trace(this._delegate, traceName);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType\n} from '@firebase/component';\nimport { PerformanceCompatImpl } from './performance';\nimport { name as packageName, version } from '../package.json';\nimport { FirebasePerformance as FirebasePerformanceCompat } from '@firebase/performance-types';\n\nfunction registerPerformanceCompat(firebaseInstance: _FirebaseNamespace): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'performance-compat',\n      performanceFactory,\n      ComponentType.PUBLIC\n    )\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n}\n\nfunction performanceFactory(\n  container: ComponentContainer\n): PerformanceCompatImpl {\n  const app = container.getProvider('app-compat').getImmediate();\n  // The following call will always succeed.\n  const performance = container.getProvider('performance').getImmediate();\n\n  return new PerformanceCompatImpl(app, performance);\n}\n\nregisterPerformanceCompat(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    performance: {\n      (app?: FirebaseApp): FirebasePerformanceCompat;\n    };\n  }\n  interface FirebaseApp {\n    performance(): FirebasePerformanceCompat;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const RC_COMPONENT_NAME = 'remote-config';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status',\n  INDEXED_DB_UNAVAILABLE = 'indexed-db-unavailable'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [ErrorCode.INDEXED_DB_UNAVAILABLE]:\n    'Indexed DB is not supported by current browser'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig,\n  Value\n} from './public_types';\nimport { RemoteConfigAbortSignal } from './client/remote_config_fetch_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Value as ValueImpl } from './value';\nimport { LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n * @returns A {@link RemoteConfig} instance.\n *\n * @public\n */\nexport function getRemoteConfig(app: FirebaseApp = getApp()): RemoteConfig {\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  return rcProvider.getImmediate();\n}\n\n/**\n * Makes the last fetched config available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function activate(remoteConfig: RemoteConfig): Promise<boolean> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n    rc._storage.getLastSuccessfulFetchResponse(),\n    rc._storage.getActiveConfigEtag()\n  ]);\n  if (\n    !lastSuccessfulFetchResponse ||\n    !lastSuccessfulFetchResponse.config ||\n    !lastSuccessfulFetchResponse.eTag ||\n    lastSuccessfulFetchResponse.eTag === activeConfigEtag\n  ) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n  await Promise.all([\n    rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n    rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n  ]);\n  return true;\n}\n\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\n * @public\n */\nexport function ensureInitialized(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n  return rc._initializePromise;\n}\n\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @public\n */\nexport async function fetchConfig(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis);\n\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n    });\n\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e, ErrorCode.FETCH_THROTTLE)\n      ? 'throttle'\n      : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n\n/**\n * Gets all config.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns All config.\n *\n * @public\n */\nexport function getAll(remoteConfig: RemoteConfig): Record<string, Value> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  return getAllKeys(\n    rc._storageCache.getActiveConfig(),\n    rc.defaultConfig\n  ).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {} as Record<string, Value>);\n}\n\n/**\n * Gets the value for the given key as a boolean.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a boolean.\n * @public\n */\nexport function getBoolean(remoteConfig: RemoteConfig, key: string): boolean {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n\n/**\n * Gets the value for the given key as a number.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a number.\n *\n * @public\n */\nexport function getNumber(remoteConfig: RemoteConfig, key: string): number {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n\n/**\n * Gets the value for the given key as a string.\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a string.\n *\n * @public\n */\nexport function getString(remoteConfig: RemoteConfig, key: string): string {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n\n/**\n * Gets the {@link Value} for the given key.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key.\n *\n * @public\n */\nexport function getValue(remoteConfig: RemoteConfig, key: string): Value {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(\n      `A value was requested for key \"${key}\" before SDK initialization completed.` +\n        ' Await on ensureInitialized if the intent was to get a previously activated value.'\n    );\n  }\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new ValueImpl('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new ValueImpl('default', String(rc.defaultConfig[key]));\n  }\n  rc._logger.debug(\n    `Returning static value for key \"${key}\".` +\n      ' Define a default or remote value if this is unintentional.'\n  );\n  return new ValueImpl('static');\n}\n\n/**\n * Defines the log level to use.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param logLevel - The log level to set.\n *\n * @public\n */\nexport function setLogLevel(\n  remoteConfig: RemoteConfig,\n  logLevel: RemoteConfigLogLevel\n): void {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = FirebaseLogLevel.ERROR;\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] =\n      await Promise.all([\n        this.storage.getLastSuccessfulFetchTimestampMillis(),\n        this.storage.getLastSuccessfulFetchResponse()\n      ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: _FirebaseInstallationsInternal,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if (originalError.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  RemoteConfigSettings\n} from './public_types';\nimport { StorageCache } from './storage/storage_cache';\nimport { RemoteConfigFetchClient } from './client/remote_config_fetch_client';\nimport { Storage } from './storage/storage';\nimport { Logger } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  /**\n   * Tracks completion of initialization promise.\n   * @internal\n   */\n  _isInitializationComplete = false;\n\n  /**\n   * De-duplicates initialization calls.\n   * @internal\n   */\n  _initializePromise?: Promise<void>;\n\n  settings: RemoteConfigSettings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    /**\n     * @internal\n     */\n    readonly _client: RemoteConfigFetchClient,\n    /**\n     * @internal\n     */\n    readonly _storageCache: StorageCache,\n    /**\n     * @internal\n     */\n    readonly _storage: Storage,\n    /**\n     * @internal\n     */\n    readonly _logger: Logger\n  ) {}\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n      };\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(\n        ERROR_FACTORY.create(ErrorCode.STORAGE_OPEN, {\n          originalErrorMessage: error\n        })\n      );\n    }\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise =\n      this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis =\n      await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis =\n        lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { RemoteConfig } from './public_types';\nimport { name as packageName, version } from '../package.json';\nimport { ensureInitialized } from './api';\nimport { CachingClient } from './client/caching_client';\nimport { RestClient } from './client/rest_client';\nimport { RetryingClient } from './client/retrying_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, ERROR_FACTORY } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Storage } from './storage/storage';\nimport { StorageCache } from './storage/storage_cache';\n// This needs to be in the same file that calls `getProvider()` on the component\n// or it will get tree-shaken out.\nimport '@firebase/installations';\n\nexport function registerRemoteConfig(): void {\n  _registerComponent(\n    new Component(\n      RC_COMPONENT_NAME,\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(packageName, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(packageName, version, '__BUILD_TARGET__');\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    { instanceIdentifier: namespace }: InstanceFactoryOptions\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container\n      .getProvider('installations-internal')\n      .getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n    // Guards against the SDK being used when indexedDB is not available.\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNAVAILABLE);\n    }\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfigImpl(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n\n    return remoteConfigInstance;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RemoteConfig } from './public_types';\nimport { activate, fetchConfig } from './api';\nimport {\n  getModularInstance,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\n *\n * Performs fetch and activate operations, as a convenience.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function fetchAndActivate(\n  remoteConfig: RemoteConfig\n): Promise<boolean> {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n\n/**\n * This method provides two different checks:\n *\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\n *\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\n * can be initialized in this environment, or false if it cannot.\n * @public\n */\nexport async function isSupported(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n", "/**\n * Firebase Remote Config\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerRemoteConfig } from './register';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport * from './api';\nexport * from './api2';\nexport * from './public_types';\n\n/** register component and version */\nregisterRemoteConfig();\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport {\n  Value as ValueCompat,\n  FetchStatus as FetchSTatusCompat,\n  Settings as SettingsCompat,\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig as RemoteConfigCompat\n} from '@firebase/remote-config-types';\nimport {\n  RemoteConfig,\n  setLogLevel,\n  activate,\n  ensureInitialized,\n  fetchAndActivate,\n  fetchConfig,\n  getAll,\n  getBoolean,\n  getNumber,\n  getString,\n  getValue,\n  isSupported\n} from '@firebase/remote-config';\n\nexport { isSupported };\n\nexport class RemoteConfigCompatImpl\n  implements RemoteConfigCompat, _FirebaseService\n{\n  constructor(public app: FirebaseApp, readonly _delegate: RemoteConfig) {}\n\n  get defaultConfig(): { [key: string]: string | number | boolean } {\n    return this._delegate.defaultConfig;\n  }\n\n  set defaultConfig(value: { [key: string]: string | number | boolean }) {\n    this._delegate.defaultConfig = value;\n  }\n\n  get fetchTimeMillis(): number {\n    return this._delegate.fetchTimeMillis;\n  }\n\n  get lastFetchStatus(): FetchSTatusCompat {\n    return this._delegate.lastFetchStatus;\n  }\n\n  get settings(): SettingsCompat {\n    return this._delegate.settings;\n  }\n\n  set settings(value: SettingsCompat) {\n    this._delegate.settings = value;\n  }\n\n  activate(): Promise<boolean> {\n    return activate(this._delegate);\n  }\n\n  ensureInitialized(): Promise<void> {\n    return ensureInitialized(this._delegate);\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  fetch(): Promise<void> {\n    return fetchConfig(this._delegate);\n  }\n\n  fetchAndActivate(): Promise<boolean> {\n    return fetchAndActivate(this._delegate);\n  }\n\n  getAll(): { [key: string]: ValueCompat } {\n    return getAll(this._delegate);\n  }\n\n  getBoolean(key: string): boolean {\n    return getBoolean(this._delegate, key);\n  }\n\n  getNumber(key: string): number {\n    return getNumber(this._delegate, key);\n  }\n\n  getString(key: string): string {\n    return getString(this._delegate, key);\n  }\n\n  getValue(key: string): ValueCompat {\n    return getValue(this._delegate, key);\n  }\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    setLogLevel(this._delegate, logLevel);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { RemoteConfigCompatImpl, isSupported } from './remoteConfig';\nimport { name as packageName, version } from '../package.json';\nimport { RemoteConfig as RemoteConfigCompat } from '@firebase/remote-config-types';\n\nfunction registerRemoteConfigCompat(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig-compat',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    )\n      .setMultipleInstances(true)\n      .setServiceProps({ isSupported })\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n}\n\nfunction remoteConfigFactory(\n  container: ComponentContainer,\n  { instanceIdentifier: namespace }: InstanceFactoryOptions\n): RemoteConfigCompatImpl {\n  const app = container.getProvider('app-compat').getImmediate();\n  // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n  const remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    remoteConfig: {\n      (app?: FirebaseApp): RemoteConfigCompat;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigCompat;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app-compat';\nimport { name, version } from '../../package.json';\n\nfirebase.registerVersion(name, version, 'app-compat');\n\nexport default firebase;\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconsole.warn(`\nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\n\nFor the module builds, these are available in the following manner\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/<PACKAGE>');\n\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n\nTypescript:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n`);\n\nimport firebase from './app';\nimport { name, version } from '../package.json';\n\nimport './analytics';\nimport './app-check';\nimport './auth';\nimport './database';\nimport './firestore';\nimport './functions';\nimport './messaging';\nimport './storage';\nimport './performance';\nimport './remote-config';\n\nfirebase.registerVersion(name, version, 'compat');\n\nexport default firebase;\n", "import d from \"./node_modules/firebase/compat/dist/index.esm.js\";export default d;"],
  "mappings": "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",
  "names": []
}
