/** @typedef {import('../types').Keyframes} Keyframes */
/** @typedef {import('../types').Scales} Scales */
/** @typedef {import('../types').Selection} Selection */
/** @typedef {import('../types').Handle} Handle */
/** @typedef {import('../types').Point} Point */
/**
 * @param {Keyframes} value
 * @param {number} ox
 * @param {number} oy
 * @param {Scales} project
 * @param {string[]} active_tracks
 * @returns {Selection}
 */
export function select_point(value: Keyframes, ox: number, oy: number, project: Scales, active_tracks: string[]): Selection;
/**
 * @param {Keyframes} value
 * @param {number} ox
 * @param {number} oy
 * @param {Scales} project
 * @param {Selection} selected
 * @returns {Handle}
 */
export function select_handle(value: Keyframes, ox: number, oy: number, project: Scales, selected: Selection): Handle;
/**
 * @param {Keyframes} value
 * @param {number} ox
 * @param {number} oy
 * @param {Scales} project
 * @param {Scales} unproject
 * @param {string[]} active_tracks
 * @returns {{ key: string, index: number, curve_index: number, point: readonly Point }}
 */
export function select_new_point(value: Keyframes, ox: number, oy: number, project: Scales, unproject: Scales, active_tracks: string[]): {
    key: string;
    index: number;
    curve_index: number;
    point: readonly import("../types").Point;
};
export type Keyframes = import('../types').Keyframes;
export type Scales = import('../types').Scales;
export type Selection = import('../types').Selection;
export type Handle = import('../types').Handle;
export type Point = import('../types').Point;
