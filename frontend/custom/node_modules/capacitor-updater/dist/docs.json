{
  "api": {
    "name": "CapacitorUpdaterPlugin",
    "slug": "capacitorupdaterplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "download",
        "signature": "(options: { url: string; }) => Promise<{ version: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ url: string; }"
          }
        ],
        "returns": "Promise<{ version: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise with version name of the downloaded version, version is generated by the plugin, it's a random string of 10 char length"
          },
          {
            "name": "param",
            "text": "url The url where download the version, it can be S3 github tag or whatever, it should be a zip file"
          }
        ],
        "docs": "download new version from url, it should be a zip file, with files inside or with a unique folder inside with all your files",
        "complexTypes": [],
        "slug": "download"
      },
      {
        "name": "set",
        "signature": "(options: { version: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ version: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an empty Promise when the version is set, if there are no index.html or no version folder throw an error"
          },
          {
            "name": "param",
            "text": "version The version name to set as current version"
          }
        ],
        "docs": "set version as current version, set will return error if there are no index.html file inside the version folder",
        "complexTypes": [],
        "slug": "set"
      },
      {
        "name": "delete",
        "signature": "(options: { version: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ version: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an empty Promise when the version is delete, otherwise throw an error"
          },
          {
            "name": "param",
            "text": "version The version name to delete"
          }
        ],
        "docs": "delete version in storage",
        "complexTypes": [],
        "slug": "delete"
      },
      {
        "name": "list",
        "signature": "() => Promise<{ versions: string[]; }>",
        "parameters": [],
        "returns": "Promise<{ versions: string[]; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise witht the version list"
          }
        ],
        "docs": "get all avaible versions",
        "complexTypes": [],
        "slug": "list"
      },
      {
        "name": "reset",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an empty Promise"
          }
        ],
        "docs": "set the original version (the one sent to Apple store / Google play store ) as current version",
        "complexTypes": [],
        "slug": "reset"
      },
      {
        "name": "current",
        "signature": "() => Promise<{ current: string; }>",
        "parameters": [],
        "returns": "Promise<{ current: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise with the current version name"
          }
        ],
        "docs": "get the curent version, if none are set it return 'default'",
        "complexTypes": [],
        "slug": "current"
      }
    ],
    "properties": []
  },
  "interfaces": [],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": []
}