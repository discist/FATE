export interface CapacitorUpdaterPlugin {
    /**
   * download new version from url, it should be a zip file, with files inside or with a unique folder inside with all your files
   * @returns {Promise<{version: string}>} an Promise with version name of the downloaded version, version is generated by the plugin, it's a random string of 10 char length
   * @param url The url where download the version, it can be S3 github tag or whatever, it should be a zip file
   */
    download(options: {
        url: string;
    }): Promise<{
        version: string;
    }>;
    /**
   * set version as current version, set will return error if there are no index.html file inside the version folder
   * @returns {Promise<void>} an empty Promise when the version is set, if there are no index.html or no version folder throw an error
   * @param version The version name to set as current version
   */
    set(options: {
        version: string;
    }): Promise<void>;
    /**
   * delete version in storage
   * @returns {Promise<void>} an empty Promise when the version is delete, otherwise throw an error
   * @param version The version name to delete
   */
    delete(options: {
        version: string;
    }): Promise<void>;
    /**
   * get all avaible versions
   * @returns {Promise<{version: string[]}>} an Promise witht the version list
   */
    list(): Promise<{
        versions: string[];
    }>;
    /**
   * set the original version (the one sent to Apple store / Google play store ) as current version
   * @returns {Promise<void>} an empty Promise
   */
    reset(): Promise<void>;
    /**
   * get the curent version, if none are set it return 'default'
   * @returns {Promise<{ current: string }>} an Promise with the current version name
   */
    current(): Promise<{
        current: string;
    }>;
}
