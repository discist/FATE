'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@capacitor/core');

const CapacitorUpdater = core.registerPlugin('CapacitorUpdater', {
    web: () => Promise.resolve().then(function () { return web; }).then(m => new m.CapacitorUpdaterWeb()),
});

class CapacitorUpdaterWeb extends core.WebPlugin {
    async download(options) {
        console.log('Cannot download version in web', options);
        return { version: "" };
    }
    async set(options) {
        console.log('Cannot set version in web', options);
    }
    async delete(options) {
        console.log('Cannot delete version in web', options);
    }
    async list() {
        console.log('Cannot list version in web');
        return { versions: [] };
    }
    async reset() {
        console.log('Cannot reset version in web');
    }
    async current() {
        console.log('Cannot get current version in web');
        return { current: 'default' };
    }
}

var web = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CapacitorUpdaterWeb: CapacitorUpdaterWeb
});

exports.CapacitorUpdater = CapacitorUpdater;
//# sourceMappingURL=plugin.cjs.js.map
