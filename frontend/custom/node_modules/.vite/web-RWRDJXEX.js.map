{
  "version": 3,
  "sources": ["../@capacitor/filesystem/src/web.ts"],
  "sourcesContent": ["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n} from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    const data = options.data;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: now,\n      mtime: now,\n      content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    // const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (occupiedEntry !== undefined) {\n      data = occupiedEntry.content + data;\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const names = entries.map(e => {\n      return e.substring(path.length + 1);\n    });\n    return { files: names };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    return this._copy(options, true);\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<void> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(options: CopyOptions, doRename = false): Promise<void> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return;\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        // Write the file to the new location\n        await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename}`,\n              to: `${to}/${filename}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: string;\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string;\n}\n"],
  "mappings": "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",
  "names": []
}
